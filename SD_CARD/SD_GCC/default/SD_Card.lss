
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000254c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000254c  000025e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022f  0080007e  0080007e  000025fe  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004d0  00000000  00000000  0000269e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b63  00000000  00000000  00002b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  000046d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001650  00000000  00000000  00004d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00006394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082e  00000000  00000000  000065c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001498  00000000  00000000  00006df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000828a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 02 	jmp	0x412	; 0x412 <__ctors_end>
       4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
       c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      10:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      14:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      18:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      1c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      20:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      24:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      28:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      2c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      30:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      34:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      38:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      3c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      40:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      44:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      48:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      4c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      50:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>

00000054 <__c.1859>:
      54:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000063 <__c.1852>:
      63:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000072 <__c.1749>:
      72:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      82:	20 63 6c 75 73 74 65 72 00                           cluster.

0000008b <__c.1747>:
      8b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      9b:	68 61 69 6e 00                                      hain.

000000a0 <__c.1739>:
      a0:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

000000af <__c.1734>:
      af:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000bf <__c.1731>:
      bf:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      cf:	21 00                                               !.

000000d1 <__c.1722>:
      d1:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      e1:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000eb <__c.1720>:
      eb:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      fb:	21 00                                               !.

000000fd <__c.1718>:
      fd:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000010e <__c.1714>:
     10e:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     11e:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     12e:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000138 <__c.1662>:
     138:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     148:	2e 2e 00                                            ...

0000014b <__c.1633>:
     14b:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     15b:	20 63 6c 75 73 74 65 72 00                           cluster.

00000164 <__c.1583>:
     164:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     174:	20 63 6c 75 73 74 65 72 00                           cluster.

0000017d <__c.1575>:
     17d:	52 4f 4f 54 00                                      ROOT.

00000182 <__c.1573>:
     182:	44 49 52 00                                         DIR.

00000186 <__c.1571>:
     186:	20 20 20 00                                            .

0000018a <__c.1569>:
     18a:	46 49 4c 45 00                                      FILE.

0000018f <__c.1567>:
     18f:	20 20 20 00                                            .

00000193 <__c.1561>:
     193:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001a1 <__c.1559>:
     1a1:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001ac <__c.1554>:
     1ac:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1bc:	69 73 74 21 00                                      ist!.

000001c1 <__c.1596>:
     1c1:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001d2 <__c.1591>:
     1d2:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     1e2:	6f 6e 67 2e 2e 00                                   ong...

000001e8 <__c.1584>:
     1e8:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     1f8:	20 00                                                .

000001fa <__c.1578>:
     1fa:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

0000020b <__c.1573>:
     20b:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000219 <__c.1570>:
     219:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     229:	21 00                                               !.

0000022b <__c.1568>:
     22b:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

0000023a <__c.1564>:
     23a:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     24a:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000254 <__c.1560>:
     254:	45 72 61 73 65 64 21 00                             Erased!.

0000025c <__c.1558>:
     25c:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000026b <__c.1555>:
     26b:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     27b:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     28b:	39 29 3a 00                                         9):.

0000028f <__c.1552>:
     28f:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     29f:	73 61 62 6c 65 64 21 00                             sabled!.

000002a7 <__c.1550>:
     2a7:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2b7:	28 30 2d 39 29 3a 20 00                             (0-9): .

000002bf <__c.1548>:
     2bf:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     2cf:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     2df:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

000002ea <__c.1546>:
     2ea:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     2fa:	65 00                                               e.

000002fc <__c.1544>:
     2fc:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

0000030d <__c.1542>:
     30d:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

0000031d <__c.1540>:
     31d:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     32d:	69 73 74 00                                         ist.

00000331 <__c.1538>:
     331:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     341:	65 20 42 6c 6f 63 6b 00                             e Block.

00000349 <__c.1536>:
     349:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     359:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

00000362 <__c.1534>:
     362:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     372:	6b 73 00                                            ks.

00000375 <__c.1532>:
     375:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000386 <__c.1530>:
     386:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00000397 <__c.1528>:
     397:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3b7:	2a 2a 2a 00                                         ***.

000003bb <__c.1526>:
     3bb:	20 44 68 61 72 6d 61 6e 69 27 73 20 6d 69 63 72      Dharmani's micr
     3cb:	6f 53 44 20 43 61 72 64 20 54 65 73 74 69 6e 67     oSD Card Testing
     3db:	2e 2e 00                                            ...

000003de <__c.1524>:
     3de:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ee:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3fe:	2a 2a 2a 00                                         ***.

00000402 <__c.1360>:
     402:	53 44 20 69 6e 69 74 20 66 61 69 6c 2e 2e 00 00     SD init fail....

00000412 <__ctors_end>:
     412:	11 24       	eor	r1, r1
     414:	1f be       	out	0x3f, r1	; 63
     416:	cf e5       	ldi	r28, 0x5F	; 95
     418:	d8 e0       	ldi	r29, 0x08	; 8
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	cd bf       	out	0x3d, r28	; 61

0000041e <__do_copy_data>:
     41e:	10 e0       	ldi	r17, 0x00	; 0
     420:	a0 e6       	ldi	r26, 0x60	; 96
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	ec e4       	ldi	r30, 0x4C	; 76
     426:	f5 e2       	ldi	r31, 0x25	; 37
     428:	02 c0       	rjmp	.+4      	; 0x42e <.do_copy_data_start>

0000042a <.do_copy_data_loop>:
     42a:	05 90       	lpm	r0, Z+
     42c:	0d 92       	st	X+, r0

0000042e <.do_copy_data_start>:
     42e:	ae 37       	cpi	r26, 0x7E	; 126
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <.do_copy_data_loop>

00000434 <__do_clear_bss>:
     434:	12 e0       	ldi	r17, 0x02	; 2
     436:	ae e7       	ldi	r26, 0x7E	; 126
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	ad 3a       	cpi	r26, 0xAD	; 173
     440:	b1 07       	cpc	r27, r17
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <main>
     448:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <_exit>

0000044c <__bad_interrupt>:
     44c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000450 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     458:	20 91 98 02 	lds	r18, 0x0298
     45c:	30 91 99 02 	lds	r19, 0x0299
     460:	e0 90 82 00 	lds	r14, 0x0082
     464:	f0 90 83 00 	lds	r15, 0x0083
     468:	00 91 84 00 	lds	r16, 0x0084
     46c:	10 91 85 00 	lds	r17, 0x0085
     470:	62 50       	subi	r22, 0x02	; 2
     472:	70 40       	sbci	r23, 0x00	; 0
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	2e 0d       	add	r18, r14
     486:	3f 1d       	adc	r19, r15
     488:	40 1f       	adc	r20, r16
     48a:	51 1f       	adc	r21, r17
}
     48c:	b9 01       	movw	r22, r18
     48e:	ca 01       	movw	r24, r20
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	08 95       	ret

0000049a <displayMemory>:
//          text string and send to UART
//Arguments: unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned long memory)
{
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	63 97       	sbiw	r28, 0x13	; 19
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
     4c2:	de 01       	movw	r26, r28
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	e0 e6       	ldi	r30, 0x60	; 96
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	83 e1       	ldi	r24, 0x13	; 19
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <displayMemory+0x32>
     4d4:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i == 5 || i == 9) 
	{
	   memoryString[i-1] = ',';  
     4d6:	8c e2       	ldi	r24, 0x2C	; 44
     4d8:	98 2e       	mov	r9, r24
{
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i == 5 || i == 9) 
     4da:	05 30       	cpi	r16, 0x05	; 5
     4dc:	11 f0       	breq	.+4      	; 0x4e2 <displayMemory+0x48>
     4de:	09 30       	cpi	r16, 0x09	; 9
     4e0:	29 f4       	brne	.+10     	; 0x4ec <displayMemory+0x52>
	{
	   memoryString[i-1] = ',';  
     4e2:	fe 01       	movw	r30, r28
     4e4:	e0 0f       	add	r30, r16
     4e6:	f1 1d       	adc	r31, r1
     4e8:	90 82       	st	Z, r9
	   i--;
     4ea:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     4ec:	5e 01       	movw	r10, r28
     4ee:	a0 0e       	add	r10, r16
     4f0:	b1 1c       	adc	r11, r1
     4f2:	c7 01       	movw	r24, r14
     4f4:	b6 01       	movw	r22, r12
     4f6:	2a e0       	ldi	r18, 0x0A	; 10
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     502:	60 63       	ori	r22, 0x30	; 48
     504:	f5 01       	movw	r30, r10
     506:	60 83       	st	Z, r22
    memory /= 10;
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	2a e0       	ldi	r18, 0x0A	; 10
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     518:	c9 01       	movw	r24, r18
     51a:	da 01       	movw	r26, r20
     51c:	6c 01       	movw	r12, r24
     51e:	7d 01       	movw	r14, r26
	if(memory == 0) break;
     520:	c1 14       	cp	r12, r1
     522:	d1 04       	cpc	r13, r1
     524:	e1 04       	cpc	r14, r1
     526:	f1 04       	cpc	r15, r1
     528:	11 f0       	breq	.+4      	; 0x52e <displayMemory+0x94>
//************************************************************
void displayMemory (unsigned long memory)
{
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     52a:	01 50       	subi	r16, 0x01	; 1
     52c:	b1 f6       	brne	.-84     	; 0x4da <displayMemory+0x40>
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }

  transmitString(memoryString);
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 59 12 	call	0x24b2	; 0x24b2 <transmitString>
}
     536:	63 96       	adiw	r28, 0x13	; 19
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	bf 90       	pop	r11
     552:	af 90       	pop	r10
     554:	9f 90       	pop	r9
     556:	08 95       	ret

00000558 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	2b 97       	sbiw	r28, 0x0b	; 11
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	8c 01       	movw	r16, r24
     572:	58 2f       	mov	r21, r24
     574:	a1 2f       	mov	r26, r17
     576:	fc 01       	movw	r30, r24
     578:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     57a:	80 81       	ld	r24, Z
     57c:	8e 32       	cpi	r24, 0x2E	; 46
     57e:	19 f4       	brne	.+6      	; 0x586 <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     580:	49 30       	cpi	r20, 0x09	; 9
     582:	30 f0       	brcs	.+12     	; 0x590 <convertFileName+0x38>
     584:	0e c0       	rjmp	.+28     	; 0x5a2 <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     586:	4f 5f       	subi	r20, 0xFF	; 255
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	4c 30       	cpi	r20, 0x0C	; 12
     58c:	b1 f7       	brne	.-20     	; 0x57a <convertFileName+0x22>
     58e:	09 c0       	rjmp	.+18     	; 0x5a2 <convertFileName+0x4a>
     590:	be 01       	movw	r22, r28
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	85 2f       	mov	r24, r21
     598:	9a 2f       	mov	r25, r26
     59a:	9c 01       	movw	r18, r24
     59c:	f9 01       	movw	r30, r18
     59e:	db 01       	movw	r26, r22
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     5a2:	88 e3       	ldi	r24, 0x38	; 56
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	52 c0       	rjmp	.+164    	; 0x652 <convertFileName+0xfa>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     5ae:	81 91       	ld	r24, Z+
     5b0:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     5b2:	8e 2f       	mov	r24, r30
     5b4:	85 1b       	sub	r24, r21
     5b6:	84 17       	cp	r24, r20
     5b8:	d0 f3       	brcs	.-12     	; 0x5ae <convertFileName+0x56>
     5ba:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     5bc:	9e 01       	movw	r18, r28
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	90 e2       	ldi	r25, 0x20	; 32
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <convertFileName+0x78>
     5c6:	f9 01       	movw	r30, r18
     5c8:	e8 0f       	add	r30, r24
     5ca:	f1 1d       	adc	r31, r1
     5cc:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	c9 f7       	brne	.-14     	; 0x5c6 <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
     5d4:	24 2f       	mov	r18, r20
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     5d8:	ae 01       	movw	r20, r28
     5da:	4f 5f       	subi	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     5e0:	f8 01       	movw	r30, r16
     5e2:	e2 0f       	add	r30, r18
     5e4:	f1 1d       	adc	r31, r1
     5e6:	90 81       	ld	r25, Z
     5e8:	99 23       	and	r25, r25
     5ea:	59 f0       	breq	.+22     	; 0x602 <convertFileName+0xaa>
    fileNameFAT[k] = fileName[j++];
     5ec:	fa 01       	movw	r30, r20
     5ee:	e8 0f       	add	r30, r24
     5f0:	f1 1d       	adc	r31, r1
     5f2:	90 83       	st	Z, r25
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <convertFileName+0xae>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     5f8:	fa 01       	movw	r30, r20
     5fa:	e8 0f       	add	r30, r24
     5fc:	f1 1d       	adc	r31, r1
     5fe:	30 83       	st	Z, r19
     600:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     602:	8b 30       	cpi	r24, 0x0B	; 11
     604:	c8 f3       	brcs	.-14     	; 0x5f8 <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	8b 30       	cpi	r24, 0x0B	; 11
     60a:	50 f3       	brcs	.-44     	; 0x5e0 <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     60c:	9e 01       	movw	r18, r28
     60e:	24 5f       	subi	r18, 0xF4	; 244
     610:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     612:	fb 01       	movw	r30, r22
     614:	90 81       	ld	r25, Z
     616:	89 2f       	mov	r24, r25
     618:	81 56       	subi	r24, 0x61	; 97
     61a:	8a 31       	cpi	r24, 0x1A	; 26
     61c:	10 f4       	brcc	.+4      	; 0x622 <convertFileName+0xca>
    fileNameFAT[j] -= 0x20;
     61e:	90 52       	subi	r25, 0x20	; 32
     620:	90 83       	st	Z, r25
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     626:	62 17       	cp	r22, r18
     628:	73 07       	cpc	r23, r19
     62a:	99 f7       	brne	.-26     	; 0x612 <convertFileName+0xba>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     630:	ae 01       	movw	r20, r28
     632:	4f 5f       	subi	r20, 0xFF	; 255
     634:	5f 4f       	sbci	r21, 0xFF	; 255
     636:	f8 01       	movw	r30, r16
     638:	e2 0f       	add	r30, r18
     63a:	f3 1f       	adc	r31, r19
     63c:	da 01       	movw	r26, r20
     63e:	a2 0f       	add	r26, r18
     640:	b3 1f       	adc	r27, r19
     642:	8c 91       	ld	r24, X
     644:	80 83       	st	Z, r24
     646:	2f 5f       	subi	r18, 0xFF	; 255
     648:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     64a:	2b 30       	cpi	r18, 0x0B	; 11
     64c:	31 05       	cpc	r19, r1
     64e:	99 f7       	brne	.-26     	; 0x636 <convertFileName+0xde>
     650:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
     652:	2b 96       	adiw	r28, 0x0b	; 11
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	cf 91       	pop	r28
     660:	df 91       	pop	r29
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     668:	6f 92       	push	r6
     66a:	7f 92       	push	r7
     66c:	8f 92       	push	r8
     66e:	9f 92       	push	r9
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     680:	60 78       	andi	r22, 0x80	; 128
     682:	3b 01       	movw	r6, r22
     684:	4c 01       	movw	r8, r24
     686:	22 e0       	ldi	r18, 0x02	; 2
     688:	66 0c       	add	r6, r6
     68a:	77 1c       	adc	r7, r7
     68c:	88 1c       	adc	r8, r8
     68e:	99 1c       	adc	r9, r9
     690:	2a 95       	dec	r18
     692:	d1 f7       	brne	.-12     	; 0x688 <searchNextFreeCluster+0x20>
     694:	5b 01       	movw	r10, r22
     696:	6c 01       	movw	r12, r24
     698:	50 c0       	rjmp	.+160    	; 0x73a <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     69a:	e0 90 a2 02 	lds	r14, 0x02A2
     69e:	f0 90 a3 02 	lds	r15, 0x02A3
     6a2:	20 91 8a 00 	lds	r18, 0x008A
     6a6:	30 91 8b 00 	lds	r19, 0x008B
      SD_readSingleBlock(sector);
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	80 91 9a 02 	lds	r24, 0x029A
     6b2:	90 91 9b 02 	lds	r25, 0x029B
     6b6:	a0 91 9c 02 	lds	r26, 0x029C
     6ba:	b0 91 9d 02 	lds	r27, 0x029D
     6be:	e8 0e       	add	r14, r24
     6c0:	f9 1e       	adc	r15, r25
     6c2:	0a 1f       	adc	r16, r26
     6c4:	1b 1f       	adc	r17, r27
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	c4 01       	movw	r24, r8
     6cc:	b3 01       	movw	r22, r6
     6ce:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     6d2:	e2 0e       	add	r14, r18
     6d4:	f3 1e       	adc	r15, r19
     6d6:	04 1f       	adc	r16, r20
     6d8:	15 1f       	adc	r17, r21
     6da:	c8 01       	movw	r24, r16
     6dc:	b7 01       	movw	r22, r14
     6de:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     6e4:	e6 2f       	mov	r30, r22
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	e8 56       	subi	r30, 0x68	; 104
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	a2 81       	ldd	r26, Z+2	; 0x02
     6fa:	b3 81       	ldd	r27, Z+3	; 0x03
     6fc:	bf 70       	andi	r27, 0x0F	; 15
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	a1 05       	cpc	r26, r1
     702:	b1 05       	cpc	r27, r1
     704:	39 f4       	brne	.+14     	; 0x714 <searchNextFreeCluster+0xac>
            return(cluster+i);
     706:	a6 01       	movw	r20, r12
     708:	95 01       	movw	r18, r10
     70a:	26 0f       	add	r18, r22
     70c:	31 1d       	adc	r19, r1
     70e:	41 1d       	adc	r20, r1
     710:	51 1d       	adc	r21, r1
     712:	25 c0       	rjmp	.+74     	; 0x75e <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	60 38       	cpi	r22, 0x80	; 128
     718:	29 f7       	brne	.-54     	; 0x6e4 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	a8 0e       	add	r10, r24
     724:	b9 1e       	adc	r11, r25
     726:	ca 1e       	adc	r12, r26
     728:	db 1e       	adc	r13, r27
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	a0 e0       	ldi	r26, 0x00	; 0
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	68 0e       	add	r6, r24
     734:	79 1e       	adc	r7, r25
     736:	8a 1e       	adc	r8, r26
     738:	9b 1e       	adc	r9, r27
     73a:	80 91 8c 00 	lds	r24, 0x008C
     73e:	90 91 8d 00 	lds	r25, 0x008D
     742:	a0 91 8e 00 	lds	r26, 0x008E
     746:	b0 91 8f 00 	lds	r27, 0x008F
     74a:	a8 16       	cp	r10, r24
     74c:	b9 06       	cpc	r11, r25
     74e:	ca 06       	cpc	r12, r26
     750:	db 06       	cpc	r13, r27
     752:	08 f4       	brcc	.+2      	; 0x756 <searchNextFreeCluster+0xee>
     754:	a2 cf       	rjmp	.-188    	; 0x69a <searchNextFreeCluster+0x32>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
     75e:	b9 01       	movw	r22, r18
     760:	ca 01       	movw	r24, r20
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	7f 90       	pop	r7
     778:	6f 90       	pop	r6
     77a:	08 95       	ret

0000077c <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	d8 2e       	mov	r13, r24
     78a:	c6 2e       	mov	r12, r22
     78c:	79 01       	movw	r14, r18
     78e:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     790:	60 91 9a 02 	lds	r22, 0x029A
     794:	70 91 9b 02 	lds	r23, 0x029B
     798:	80 91 9c 02 	lds	r24, 0x029C
     79c:	90 91 9d 02 	lds	r25, 0x029D
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	9f 4f       	sbci	r25, 0xFF	; 255
     7a8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     7ac:	80 91 98 00 	lds	r24, 0x0098
     7b0:	90 91 99 00 	lds	r25, 0x0099
     7b4:	a0 91 9a 00 	lds	r26, 0x009A
     7b8:	b0 91 9b 00 	lds	r27, 0x009B
     7bc:	82 55       	subi	r24, 0x52	; 82
     7be:	92 45       	sbci	r25, 0x52	; 82
     7c0:	a1 46       	sbci	r26, 0x61	; 97
     7c2:	b1 44       	sbci	r27, 0x41	; 65
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <getSetFreeCluster+0x4c>
     7c6:	54 c0       	rjmp	.+168    	; 0x870 <__stack+0x11>
     7c8:	80 91 7c 02 	lds	r24, 0x027C
     7cc:	90 91 7d 02 	lds	r25, 0x027D
     7d0:	a0 91 7e 02 	lds	r26, 0x027E
     7d4:	b0 91 7f 02 	lds	r27, 0x027F
     7d8:	82 57       	subi	r24, 0x72	; 114
     7da:	92 47       	sbci	r25, 0x72	; 114
     7dc:	a1 44       	sbci	r26, 0x41	; 65
     7de:	b1 46       	sbci	r27, 0x61	; 97
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <getSetFreeCluster+0x68>
     7e2:	46 c0       	rjmp	.+140    	; 0x870 <__stack+0x11>
     7e4:	80 91 94 02 	lds	r24, 0x0294
     7e8:	90 91 95 02 	lds	r25, 0x0295
     7ec:	a0 91 96 02 	lds	r26, 0x0296
     7f0:	b0 91 97 02 	lds	r27, 0x0297
     7f4:	80 50       	subi	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	a5 45       	sbci	r26, 0x55	; 85
     7fa:	ba 4a       	sbci	r27, 0xAA	; 170
     7fc:	c9 f5       	brne	.+114    	; 0x870 <__stack+0x11>
  return 0xffffffff;

 if(get_set == GET)
     7fe:	cc 20       	and	r12, r12
     800:	a9 f4       	brne	.+42     	; 0x82c <getSetFreeCluster+0xb0>
 {
   if(totOrNext == TOTAL_FREE)
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	d8 16       	cp	r13, r24
     806:	49 f4       	brne	.+18     	; 0x81a <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
     808:	20 91 80 02 	lds	r18, 0x0280
     80c:	30 91 81 02 	lds	r19, 0x0281
     810:	40 91 82 02 	lds	r20, 0x0282
     814:	50 91 83 02 	lds	r21, 0x0283
     818:	2f c0       	rjmp	.+94     	; 0x878 <__stack+0x19>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     81a:	20 91 84 02 	lds	r18, 0x0284
     81e:	30 91 85 02 	lds	r19, 0x0285
     822:	40 91 86 02 	lds	r20, 0x0286
     826:	50 91 87 02 	lds	r21, 0x0287
     82a:	26 c0       	rjmp	.+76     	; 0x878 <__stack+0x19>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	d2 16       	cp	r13, r18
     830:	49 f4       	brne	.+18     	; 0x844 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     832:	e0 92 80 02 	sts	0x0280, r14
     836:	f0 92 81 02 	sts	0x0281, r15
     83a:	00 93 82 02 	sts	0x0282, r16
     83e:	10 93 83 02 	sts	0x0283, r17
     842:	08 c0       	rjmp	.+16     	; 0x854 <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     844:	e0 92 84 02 	sts	0x0284, r14
     848:	f0 92 85 02 	sts	0x0285, r15
     84c:	00 93 86 02 	sts	0x0286, r16
     850:	10 93 87 02 	sts	0x0287, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     854:	60 91 9a 02 	lds	r22, 0x029A
     858:	70 91 9b 02 	lds	r23, 0x029B
     85c:	80 91 9c 02 	lds	r24, 0x029C
     860:	90 91 9d 02 	lds	r25, 0x029D
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	8f 4f       	sbci	r24, 0xFF	; 255
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
 }
 return 0xffffffff;
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f ef       	ldi	r20, 0xFF	; 255
     876:	5f ef       	ldi	r21, 0xFF	; 255
}
     878:	b9 01       	movw	r22, r18
     87a:	ca 01       	movw	r24, r20
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	08 95       	ret

0000088a <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	d8 2e       	mov	r13, r24
     896:	db 01       	movw	r26, r22
     898:	ca 01       	movw	r24, r20
     89a:	e9 e0       	ldi	r30, 0x09	; 9
     89c:	b6 95       	lsr	r27
     89e:	a7 95       	ror	r26
     8a0:	97 95       	ror	r25
     8a2:	87 95       	ror	r24
     8a4:	ea 95       	dec	r30
     8a6:	d1 f7       	brne	.-12     	; 0x89c <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     8a8:	51 70       	andi	r21, 0x01	; 1
     8aa:	60 70       	andi	r22, 0x00	; 0
     8ac:	70 70       	andi	r23, 0x00	; 0
     8ae:	41 15       	cp	r20, r1
     8b0:	51 05       	cpc	r21, r1
     8b2:	61 05       	cpc	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	19 f4       	brne	.+6      	; 0x8be <freeMemoryUpdate+0x34>
     8b8:	ac 01       	movw	r20, r24
     8ba:	bd 01       	movw	r22, r26
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
     8be:	ac 01       	movw	r20, r24
     8c0:	bd 01       	movw	r22, r26
     8c2:	4f 5f       	subi	r20, 0xFF	; 255
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	6f 4f       	sbci	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	db 01       	movw	r26, r22
     8cc:	ca 01       	movw	r24, r20
     8ce:	33 e0       	ldi	r19, 0x03	; 3
     8d0:	b6 95       	lsr	r27
     8d2:	a7 95       	ror	r26
     8d4:	97 95       	ror	r25
     8d6:	87 95       	ror	r24
     8d8:	3a 95       	dec	r19
     8da:	d1 f7       	brne	.-12     	; 0x8d0 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
     8dc:	47 70       	andi	r20, 0x07	; 7
     8de:	50 70       	andi	r21, 0x00	; 0
     8e0:	60 70       	andi	r22, 0x00	; 0
     8e2:	70 70       	andi	r23, 0x00	; 0
     8e4:	41 15       	cp	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	61 05       	cpc	r22, r1
     8ea:	71 05       	cpc	r23, r1
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <freeMemoryUpdate+0x6a>
     8ee:	7c 01       	movw	r14, r24
     8f0:	8d 01       	movw	r16, r26
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
     8f4:	7c 01       	movw	r14, r24
     8f6:	8d 01       	movw	r16, r26
     8f8:	08 94       	sec
     8fa:	e1 1c       	adc	r14, r1
     8fc:	f1 1c       	adc	r15, r1
     8fe:	01 1d       	adc	r16, r1
     900:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
     902:	80 91 a8 02 	lds	r24, 0x02A8
     906:	88 23       	and	r24, r24
     908:	d9 f0       	breq	.+54     	; 0x940 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
	if(flag == ADD)
     91a:	dd 20       	and	r13, r13
     91c:	39 f4       	brne	.+14     	; 0x92c <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	2e 0d       	add	r18, r14
     924:	3f 1d       	adc	r19, r15
     926:	40 1f       	adc	r20, r16
     928:	51 1f       	adc	r21, r17
     92a:	06 c0       	rjmp	.+12     	; 0x938 <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     92c:	9b 01       	movw	r18, r22
     92e:	ac 01       	movw	r20, r24
     930:	2e 19       	sub	r18, r14
     932:	3f 09       	sbc	r19, r15
     934:	40 0b       	sbc	r20, r16
     936:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
  }
}
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	08 95       	ret

0000094c <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     94c:	2f 92       	push	r2
     94e:	3f 92       	push	r3
     950:	4f 92       	push	r4
     952:	5f 92       	push	r5
     954:	6f 92       	push	r6
     956:	7f 92       	push	r7
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
unsigned long totalMemory, freeMemory, freeClusters, totalClusterCount, cluster;
unsigned long sector, *value;
unsigned int i;

totalMemory = totalClusters * sectorPerCluster * bytesPerSector;
     96c:	60 90 8c 00 	lds	r6, 0x008C
     970:	70 90 8d 00 	lds	r7, 0x008D
     974:	80 90 8e 00 	lds	r8, 0x008E
     978:	90 90 8f 00 	lds	r9, 0x008F
     97c:	e0 90 98 02 	lds	r14, 0x0298
     980:	f0 90 99 02 	lds	r15, 0x0299
     984:	a0 90 8a 00 	lds	r10, 0x008A
     988:	b0 90 8b 00 	lds	r11, 0x008B

TX_NEWLINE;
     98c:	8d e0       	ldi	r24, 0x0D	; 13
     98e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
TX_NEWLINE;
     998:	8d e0       	ldi	r24, 0x0D	; 13
     99a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     9a4:	83 e6       	ldi	r24, 0x63	; 99
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>

displayMemory (totalMemory);
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	cc 24       	eor	r12, r12
     9b2:	dd 24       	eor	r13, r13
     9b4:	c8 01       	movw	r24, r16
     9b6:	b7 01       	movw	r22, r14
     9b8:	a6 01       	movw	r20, r12
     9ba:	95 01       	movw	r18, r10
     9bc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     9c0:	a4 01       	movw	r20, r8
     9c2:	93 01       	movw	r18, r6
     9c4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     9c8:	0e 94 4d 02 	call	0x49a	; 0x49a <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
     9dc:	1b 01       	movw	r2, r22
     9de:	2c 01       	movw	r4, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     9e0:	80 91 8c 00 	lds	r24, 0x008C
     9e4:	90 91 8d 00 	lds	r25, 0x008D
     9e8:	a0 91 8e 00 	lds	r26, 0x008E
     9ec:	b0 91 8f 00 	lds	r27, 0x008F
     9f0:	82 15       	cp	r24, r2
     9f2:	93 05       	cpc	r25, r3
     9f4:	a4 05       	cpc	r26, r4
     9f6:	b5 05       	cpc	r27, r5
     9f8:	08 f0       	brcs	.+2      	; 0x9fc <memoryStatistics+0xb0>
     9fa:	7c c0       	rjmp	.+248    	; 0xaf4 <memoryStatistics+0x1a8>
{
   freeClusterCountUpdated = 0;
     9fc:	10 92 a8 02 	sts	0x02A8, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     a00:	a0 90 90 00 	lds	r10, 0x0090
     a04:	b0 90 91 00 	lds	r11, 0x0091
     a08:	c0 90 92 00 	lds	r12, 0x0092
     a0c:	d0 90 93 00 	lds	r13, 0x0093
     a10:	a2 e0       	ldi	r26, 0x02	; 2
     a12:	aa 0c       	add	r10, r10
     a14:	bb 1c       	adc	r11, r11
     a16:	cc 1c       	adc	r12, r12
     a18:	dd 1c       	adc	r13, r13
     a1a:	aa 95       	dec	r26
     a1c:	d1 f7       	brne	.-12     	; 0xa12 <memoryStatistics+0xc6>
     a1e:	22 24       	eor	r2, r2
     a20:	33 24       	eor	r3, r3
     a22:	21 01       	movw	r4, r2
     a24:	66 24       	eor	r6, r6
     a26:	77 24       	eor	r7, r7
     a28:	43 01       	movw	r8, r6
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     a2a:	e0 90 a2 02 	lds	r14, 0x02A2
     a2e:	f0 90 a3 02 	lds	r15, 0x02A3
     a32:	20 91 8a 00 	lds	r18, 0x008A
     a36:	30 91 8b 00 	lds	r19, 0x008B
      SD_readSingleBlock(sector);
     a3a:	00 e0       	ldi	r16, 0x00	; 0
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	80 91 9a 02 	lds	r24, 0x029A
     a42:	90 91 9b 02 	lds	r25, 0x029B
     a46:	a0 91 9c 02 	lds	r26, 0x029C
     a4a:	b0 91 9d 02 	lds	r27, 0x029D
     a4e:	e8 0e       	add	r14, r24
     a50:	f9 1e       	adc	r15, r25
     a52:	0a 1f       	adc	r16, r26
     a54:	1b 1f       	adc	r17, r27
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	c6 01       	movw	r24, r12
     a5c:	b5 01       	movw	r22, r10
     a5e:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     a62:	e2 0e       	add	r14, r18
     a64:	f3 1e       	adc	r15, r19
     a66:	04 1f       	adc	r16, r20
     a68:	15 1f       	adc	r17, r21
     a6a:	c8 01       	movw	r24, r16
     a6c:	b7 01       	movw	r22, r14
     a6e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
     a72:	a4 01       	movw	r20, r8
     a74:	93 01       	movw	r18, r6
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     a7a:	fb 01       	movw	r30, r22
     a7c:	e8 56       	subi	r30, 0x68	; 104
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	a2 81       	ldd	r26, Z+2	; 0x02
     a86:	b3 81       	ldd	r27, Z+3	; 0x03
     a88:	bf 70       	andi	r27, 0x0F	; 15
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	29 f4       	brne	.+10     	; 0xa9c <memoryStatistics+0x150>
            freeClusters++;;
     a92:	08 94       	sec
     a94:	21 1c       	adc	r2, r1
     a96:	31 1c       	adc	r3, r1
     a98:	41 1c       	adc	r4, r1
     a9a:	51 1c       	adc	r5, r1
        
         totalClusterCount++;
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
     aa4:	80 91 8c 00 	lds	r24, 0x008C
     aa8:	90 91 8d 00 	lds	r25, 0x008D
     aac:	a0 91 8e 00 	lds	r26, 0x008E
     ab0:	b0 91 8f 00 	lds	r27, 0x008F
     ab4:	02 96       	adiw	r24, 0x02	; 2
     ab6:	a1 1d       	adc	r26, r1
     ab8:	b1 1d       	adc	r27, r1
     aba:	28 17       	cp	r18, r24
     abc:	39 07       	cpc	r19, r25
     abe:	4a 07       	cpc	r20, r26
     ac0:	5b 07       	cpc	r21, r27
     ac2:	c1 f0       	breq	.+48     	; 0xaf4 <memoryStatistics+0x1a8>
     ac4:	c9 01       	movw	r24, r18
     ac6:	86 19       	sub	r24, r6
     ac8:	97 09       	sbc	r25, r7
     aca:	6c 5f       	subi	r22, 0xFC	; 252
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     ace:	02 e0       	ldi	r16, 0x02	; 2
     ad0:	60 30       	cpi	r22, 0x00	; 0
     ad2:	70 07       	cpc	r23, r16
     ad4:	91 f6       	brne	.-92     	; 0xa7a <memoryStatistics+0x12e>
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f2 e0       	ldi	r31, 0x02	; 2
     ada:	ff 2e       	mov	r15, r31
     adc:	01 2d       	mov	r16, r1
     ade:	11 2d       	mov	r17, r1
     ae0:	ae 0c       	add	r10, r14
     ae2:	bf 1c       	adc	r11, r15
     ae4:	c0 1e       	adc	r12, r16
     ae6:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     ae8:	80 38       	cpi	r24, 0x80	; 128
     aea:	91 05       	cpc	r25, r1
     aec:	18 f0       	brcs	.+6      	; 0xaf4 <memoryStatistics+0x1a8>
     aee:	39 01       	movw	r6, r18
     af0:	4a 01       	movw	r8, r20
     af2:	9b cf       	rjmp	.-202    	; 0xa2a <memoryStatistics+0xde>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
     af4:	80 91 a8 02 	lds	r24, 0x02A8
     af8:	88 23       	and	r24, r24
     afa:	31 f4       	brne	.+12     	; 0xb08 <memoryStatistics+0x1bc>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	a2 01       	movw	r20, r4
     b02:	91 01       	movw	r18, r2
     b04:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 a8 02 	sts	0x02A8, r24
freeMemory = freeClusters * sectorPerCluster * bytesPerSector;
     b0e:	a0 90 98 02 	lds	r10, 0x0298
     b12:	b0 90 99 02 	lds	r11, 0x0299
     b16:	e0 90 8a 00 	lds	r14, 0x008A
     b1a:	f0 90 8b 00 	lds	r15, 0x008B
TX_NEWLINE;
     b1e:	8d e0       	ldi	r24, 0x0D	; 13
     b20:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     b24:	8a e0       	ldi	r24, 0x0A	; 10
     b26:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     b2a:	84 e5       	ldi	r24, 0x54	; 84
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
displayMemory (freeMemory);
     b32:	00 e0       	ldi	r16, 0x00	; 0
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	cc 24       	eor	r12, r12
     b38:	dd 24       	eor	r13, r13
     b3a:	c8 01       	movw	r24, r16
     b3c:	b7 01       	movw	r22, r14
     b3e:	a6 01       	movw	r20, r12
     b40:	95 01       	movw	r18, r10
     b42:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     b46:	a2 01       	movw	r20, r4
     b48:	91 01       	movw	r18, r2
     b4a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     b4e:	0e 94 4d 02 	call	0x49a	; 0x49a <displayMemory>
TX_NEWLINE;
     b52:	8d e0       	ldi	r24, 0x0D	; 13
     b54:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     b58:	8a e0       	ldi	r24, 0x0A	; 10
     b5a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
}
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	08 95       	ret

00000b80 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     b80:	6f 92       	push	r6
     b82:	7f 92       	push	r7
     b84:	8f 92       	push	r8
     b86:	9f 92       	push	r9
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     b98:	10 92 9a 02 	sts	0x029A, r1
     b9c:	10 92 9b 02 	sts	0x029B, r1
     ba0:	10 92 9c 02 	sts	0x029C, r1
     ba4:	10 92 9d 02 	sts	0x029D, r1

SD_readSingleBlock(0);
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     bb4:	80 91 98 00 	lds	r24, 0x0098
     bb8:	89 3e       	cpi	r24, 0xE9	; 233
     bba:	19 f1       	breq	.+70     	; 0xc02 <getBootSectorData+0x82>
     bbc:	8b 3e       	cpi	r24, 0xEB	; 235
     bbe:	09 f1       	breq	.+66     	; 0xc02 <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     bc0:	80 91 96 02 	lds	r24, 0x0296
     bc4:	90 91 97 02 	lds	r25, 0x0297
     bc8:	85 55       	subi	r24, 0x55	; 85
     bca:	9a 4a       	sbci	r25, 0xAA	; 170
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <getBootSectorData+0x50>
     bce:	b0 c0       	rjmp	.+352    	; 0xd30 <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     bd0:	60 91 5e 02 	lds	r22, 0x025E
     bd4:	70 91 5f 02 	lds	r23, 0x025F
     bd8:	80 91 60 02 	lds	r24, 0x0260
     bdc:	90 91 61 02 	lds	r25, 0x0261
     be0:	60 93 9a 02 	sts	0x029A, r22
     be4:	70 93 9b 02 	sts	0x029B, r23
     be8:	80 93 9c 02 	sts	0x029C, r24
     bec:	90 93 9d 02 	sts	0x029D, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     bf0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     bf4:	80 91 98 00 	lds	r24, 0x0098
     bf8:	89 3e       	cpi	r24, 0xE9	; 233
     bfa:	19 f0       	breq	.+6      	; 0xc02 <getBootSectorData+0x82>
     bfc:	8b 3e       	cpi	r24, 0xEB	; 235
     bfe:	09 f0       	breq	.+2      	; 0xc02 <getBootSectorData+0x82>
     c00:	97 c0       	rjmp	.+302    	; 0xd30 <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
     c02:	80 91 a3 00 	lds	r24, 0x00A3
     c06:	90 91 a4 00 	lds	r25, 0x00A4
     c0a:	90 93 8b 00 	sts	0x008B, r25
     c0e:	80 93 8a 00 	sts	0x008A, r24
sectorPerCluster = bpb->sectorPerCluster;
     c12:	80 91 a5 00 	lds	r24, 0x00A5
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	90 93 99 02 	sts	0x0299, r25
     c1c:	80 93 98 02 	sts	0x0298, r24
reservedSectorCount = bpb->reservedSectorCount;
     c20:	a0 90 a6 00 	lds	r10, 0x00A6
     c24:	b0 90 a7 00 	lds	r11, 0x00A7
     c28:	b0 92 a3 02 	sts	0x02A3, r11
     c2c:	a0 92 a2 02 	sts	0x02A2, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     c30:	80 91 c4 00 	lds	r24, 0x00C4
     c34:	90 91 c5 00 	lds	r25, 0x00C5
     c38:	a0 91 c6 00 	lds	r26, 0x00C6
     c3c:	b0 91 c7 00 	lds	r27, 0x00C7
     c40:	80 93 90 00 	sts	0x0090, r24
     c44:	90 93 91 00 	sts	0x0091, r25
     c48:	a0 93 92 00 	sts	0x0092, r26
     c4c:	b0 93 93 00 	sts	0x0093, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     c50:	e0 90 a2 02 	lds	r14, 0x02A2
     c54:	f0 90 a3 02 	lds	r15, 0x02A3
     c58:	60 91 a8 00 	lds	r22, 0x00A8
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	20 91 bc 00 	lds	r18, 0x00BC
     c66:	30 91 bd 00 	lds	r19, 0x00BD
     c6a:	40 91 be 00 	lds	r20, 0x00BE
     c6e:	50 91 bf 00 	lds	r21, 0x00BF
     c72:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     c76:	3b 01       	movw	r6, r22
     c78:	4c 01       	movw	r8, r24
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	80 91 b4 00 	lds	r24, 0x00B4
     c82:	90 91 b5 00 	lds	r25, 0x00B5
     c86:	a0 91 b6 00 	lds	r26, 0x00B6
     c8a:	b0 91 b7 00 	lds	r27, 0x00B7
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	e6 0c       	add	r14, r6
     c98:	f7 1c       	adc	r15, r7
     c9a:	08 1d       	adc	r16, r8
     c9c:	19 1d       	adc	r17, r9
     c9e:	e0 92 82 00 	sts	0x0082, r14
     ca2:	f0 92 83 00 	sts	0x0083, r15
     ca6:	00 93 84 00 	sts	0x0084, r16
     caa:	10 93 85 00 	sts	0x0085, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     cae:	20 91 98 02 	lds	r18, 0x0298
     cb2:	30 91 99 02 	lds	r19, 0x0299
     cb6:	cc 24       	eor	r12, r12
     cb8:	dd 24       	eor	r13, r13
     cba:	60 91 b8 00 	lds	r22, 0x00B8
     cbe:	70 91 b9 00 	lds	r23, 0x00B9
     cc2:	80 91 ba 00 	lds	r24, 0x00BA
     cc6:	90 91 bb 00 	lds	r25, 0x00BB
     cca:	6a 19       	sub	r22, r10
     ccc:	7b 09       	sbc	r23, r11
     cce:	8c 09       	sbc	r24, r12
     cd0:	9d 09       	sbc	r25, r13
     cd2:	66 19       	sub	r22, r6
     cd4:	77 09       	sbc	r23, r7
     cd6:	88 09       	sbc	r24, r8
     cd8:	99 09       	sbc	r25, r9
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     ce2:	c9 01       	movw	r24, r18
     ce4:	da 01       	movw	r26, r20
     ce6:	80 93 8c 00 	sts	0x008C, r24
     cea:	90 93 8d 00 	sts	0x008D, r25
     cee:	a0 93 8e 00 	sts	0x008E, r26
     cf2:	b0 93 8f 00 	sts	0x008F, r27

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
     d06:	20 91 8c 00 	lds	r18, 0x008C
     d0a:	30 91 8d 00 	lds	r19, 0x008D
     d0e:	40 91 8e 00 	lds	r20, 0x008E
     d12:	50 91 8f 00 	lds	r21, 0x008F
     d16:	26 17       	cp	r18, r22
     d18:	37 07       	cpc	r19, r23
     d1a:	48 07       	cpc	r20, r24
     d1c:	59 07       	cpc	r21, r25
     d1e:	18 f4       	brcc	.+6      	; 0xd26 <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
     d20:	10 92 a8 02 	sts	0x02A8, r1
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 a8 02 	sts	0x02A8, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <getBootSectorData+0x1b2>
     d30:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	08 95       	ret

00000d4c <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	5b 01       	movw	r10, r22
     d6e:	6c 01       	movw	r12, r24
     d70:	84 2e       	mov	r8, r20
     d72:	28 01       	movw	r4, r16
     d74:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     d76:	80 91 a2 02 	lds	r24, 0x02A2
     d7a:	90 91 a3 02 	lds	r25, 0x02A3
     d7e:	b2 e0       	ldi	r27, 0x02	; 2
     d80:	aa 0c       	add	r10, r10
     d82:	bb 1c       	adc	r11, r11
     d84:	cc 1c       	adc	r12, r12
     d86:	dd 1c       	adc	r13, r13
     d88:	ba 95       	dec	r27
     d8a:	d1 f7       	brne	.-12     	; 0xd80 <getSetNextCluster+0x34>
     d8c:	20 91 8a 00 	lds	r18, 0x008A
     d90:	30 91 8b 00 	lds	r19, 0x008B
     d94:	7c 01       	movw	r14, r24
     d96:	00 e0       	ldi	r16, 0x00	; 0
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	80 91 9a 02 	lds	r24, 0x029A
     d9e:	90 91 9b 02 	lds	r25, 0x029B
     da2:	a0 91 9c 02 	lds	r26, 0x029C
     da6:	b0 91 9d 02 	lds	r27, 0x029D
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	c6 01       	movw	r24, r12
     db8:	b5 01       	movw	r22, r10
     dba:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     dbe:	e2 0e       	add	r14, r18
     dc0:	f3 1e       	adc	r15, r19
     dc2:	04 1f       	adc	r16, r20
     dc4:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     dc6:	c0 91 8a 00 	lds	r28, 0x008A
     dca:	d0 91 8b 00 	lds	r29, 0x008B
     dce:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     dd0:	c8 01       	movw	r24, r16
     dd2:	b7 01       	movw	r22, r14
     dd4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
     dd8:	88 23       	and	r24, r24
     dda:	21 f0       	breq	.+8      	; 0xde4 <getSetNextCluster+0x98>
     ddc:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	98 16       	cp	r9, r24
     de2:	b1 f7       	brne	.-20     	; 0xdd0 <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     de4:	9e 01       	movw	r18, r28
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	c6 01       	movw	r24, r12
     dec:	b5 01       	movw	r22, r10
     dee:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
     df2:	fb 01       	movw	r30, r22
     df4:	e8 56       	subi	r30, 0x68	; 104
     df6:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
     df8:	88 20       	and	r8, r8
     dfa:	31 f4       	brne	.+12     	; 0xe08 <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
     dfc:	20 81       	ld	r18, Z
     dfe:	31 81       	ldd	r19, Z+1	; 0x01
     e00:	42 81       	ldd	r20, Z+2	; 0x02
     e02:	53 81       	ldd	r21, Z+3	; 0x03
     e04:	5f 70       	andi	r21, 0x0F	; 15
     e06:	0c c0       	rjmp	.+24     	; 0xe20 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     e08:	40 82       	st	Z, r4
     e0a:	51 82       	std	Z+1, r5	; 0x01
     e0c:	62 82       	std	Z+2, r6	; 0x02
     e0e:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     e10:	c8 01       	movw	r24, r16
     e12:	b7 01       	movw	r22, r14
     e14:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
     e20:	b9 01       	movw	r22, r18
     e22:	ca 01       	movw	r24, r20
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	bf 90       	pop	r11
     e36:	af 90       	pop	r10
     e38:	9f 90       	pop	r9
     e3a:	8f 90       	pop	r8
     e3c:	7f 90       	pop	r7
     e3e:	6f 90       	pop	r6
     e40:	5f 90       	pop	r5
     e42:	4f 90       	pop	r4
     e44:	08 95       	ret

00000e46 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     e46:	2f 92       	push	r2
     e48:	3f 92       	push	r3
     e4a:	4f 92       	push	r4
     e4c:	5f 92       	push	r5
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	2a 97       	sbiw	r28, 0x0a	; 10
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	7f 83       	std	Y+7, r23	; 0x07
     e7e:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     e80:	a0 90 90 00 	lds	r10, 0x0090
     e84:	b0 90 91 00 	lds	r11, 0x0091
     e88:	c0 90 92 00 	lds	r12, 0x0092
     e8c:	d0 90 93 00 	lds	r13, 0x0093
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     e94:	20 91 98 02 	lds	r18, 0x0298
     e98:	30 91 99 02 	lds	r19, 0x0299
     e9c:	e0 90 82 00 	lds	r14, 0x0082
     ea0:	f0 90 83 00 	lds	r15, 0x0083
     ea4:	00 91 84 00 	lds	r16, 0x0084
     ea8:	10 91 85 00 	lds	r17, 0x0085
     eac:	c6 01       	movw	r24, r12
     eae:	b5 01       	movw	r22, r10
     eb0:	62 50       	subi	r22, 0x02	; 2
     eb2:	70 40       	sbci	r23, 0x00	; 0
     eb4:	80 40       	sbci	r24, 0x00	; 0
     eb6:	90 40       	sbci	r25, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
     ec0:	1b 01       	movw	r2, r22
     ec2:	2c 01       	movw	r4, r24
     ec4:	2e 0c       	add	r2, r14
     ec6:	3f 1c       	adc	r3, r15
     ec8:	40 1e       	adc	r4, r16
     eca:	51 1e       	adc	r5, r17
     ecc:	66 24       	eor	r6, r6
     ece:	77 24       	eor	r7, r7
     ed0:	43 01       	movw	r8, r6
     ed2:	5f c1       	rjmp	.+702    	; 0x1192 <findFiles+0x34c>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     ed4:	d4 01       	movw	r26, r8
     ed6:	c3 01       	movw	r24, r6
     ed8:	82 0d       	add	r24, r2
     eda:	93 1d       	adc	r25, r3
     edc:	a4 1d       	adc	r26, r4
     ede:	b5 1d       	adc	r27, r5
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	ab 83       	std	Y+3, r26	; 0x03
     ee6:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	e4 2e       	mov	r14, r20
     ef4:	f1 2c       	mov	r15, r1
     ef6:	3d c1       	rjmp	.+634    	; 0x1172 <findFiles+0x32c>
	

     for(i=0; i<bytesPerSector; i+=32)
     ef8:	8a 01       	movw	r16, r20
     efa:	08 56       	subi	r16, 0x68	; 104
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     efe:	f7 01       	movw	r30, r14
     f00:	e8 56       	subi	r30, 0x68	; 104
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	b0 97       	sbiw	r30, 0x20	; 32
     f06:	80 81       	ld	r24, Z
     f08:	b0 96       	adiw	r30, 0x20	; 32
     f0a:	88 23       	and	r24, r24
     f0c:	41 f4       	brne	.+16     	; 0xf1e <findFiles+0xd8>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	91 50       	subi	r25, 0x01	; 1
     f12:	92 30       	cpi	r25, 0x02	; 2
     f14:	08 f0       	brcs	.+2      	; 0xf18 <findFiles+0xd2>
     f16:	67 c1       	rjmp	.+718    	; 0x11e6 <findFiles+0x3a0>
		      transmitString_F(PSTR("File does not exist!"));
     f18:	8c ea       	ldi	r24, 0xAC	; 172
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	62 c1       	rjmp	.+708    	; 0x11e2 <findFiles+0x39c>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     f1e:	85 3e       	cpi	r24, 0xE5	; 229
     f20:	09 f4       	brne	.+2      	; 0xf24 <findFiles+0xde>
     f22:	23 c1       	rjmp	.+582    	; 0x116a <findFiles+0x324>
     f24:	75 97       	sbiw	r30, 0x15	; 21
     f26:	80 81       	ld	r24, Z
     f28:	8f 30       	cpi	r24, 0x0F	; 15
     f2a:	09 f4       	brne	.+2      	; 0xf2e <findFiles+0xe8>
     f2c:	1e c1       	rjmp	.+572    	; 0x116a <findFiles+0x324>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     f2e:	a8 85       	ldd	r26, Y+8	; 0x08
     f30:	a2 30       	cpi	r26, 0x02	; 2
     f32:	08 f0       	brcs	.+2      	; 0xf36 <findFiles+0xf0>
     f34:	d2 c0       	rjmp	.+420    	; 0x10da <findFiles+0x294>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
     f3a:	c8 01       	movw	r24, r16
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	ae 81       	ldd	r26, Y+6	; 0x06
     f42:	bf 81       	ldd	r27, Y+7	; 0x07
     f44:	a2 0f       	add	r26, r18
     f46:	b3 1f       	adc	r27, r19
     f48:	fc 01       	movw	r30, r24
     f4a:	90 81       	ld	r25, Z
     f4c:	8c 91       	ld	r24, X
     f4e:	98 17       	cp	r25, r24
     f50:	09 f0       	breq	.+2      	; 0xf54 <findFiles+0x10e>
     f52:	0b c1       	rjmp	.+534    	; 0x116a <findFiles+0x324>
     f54:	82 2f       	mov	r24, r18
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     f5c:	2b 30       	cpi	r18, 0x0B	; 11
     f5e:	31 05       	cpc	r19, r1
     f60:	61 f7       	brne	.-40     	; 0xf3a <findFiles+0xf4>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
     f62:	8b 30       	cpi	r24, 0x0B	; 11
     f64:	09 f0       	breq	.+2      	; 0xf68 <findFiles+0x122>
     f66:	01 c1       	rjmp	.+514    	; 0x116a <findFiles+0x324>
			{
			  if(flag == GET_FILE)
     f68:	fd 81       	ldd	r31, Y+5	; 0x05
     f6a:	f1 30       	cpi	r31, 0x01	; 1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <findFiles+0x12a>
     f6e:	3f c0       	rjmp	.+126    	; 0xfee <findFiles+0x1a8>
              {
			    appendFileSector = firstSector + sector;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	ab 81       	ldd	r26, Y+3	; 0x03
     f76:	bc 81       	ldd	r27, Y+4	; 0x04
     f78:	80 93 a9 02 	sts	0x02A9, r24
     f7c:	90 93 aa 02 	sts	0x02AA, r25
     f80:	a0 93 ab 02 	sts	0x02AB, r26
     f84:	b0 93 ac 02 	sts	0x02AC, r27
				appendFileLocation = i;
     f88:	ca 01       	movw	r24, r20
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	80 93 7e 00 	sts	0x007E, r24
     f92:	90 93 7f 00 	sts	0x007F, r25
     f96:	a0 93 80 00 	sts	0x0080, r26
     f9a:	b0 93 81 00 	sts	0x0081, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     f9e:	d8 01       	movw	r26, r16
     fa0:	54 96       	adiw	r26, 0x14	; 20
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	55 97       	sbiw	r26, 0x15	; 21
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	dc 01       	movw	r26, r24
     fae:	99 27       	eor	r25, r25
     fb0:	88 27       	eor	r24, r24
     fb2:	f8 01       	movw	r30, r16
     fb4:	22 8d       	ldd	r18, Z+26	; 0x1a
     fb6:	33 8d       	ldd	r19, Z+27	; 0x1b
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	82 2b       	or	r24, r18
     fbe:	93 2b       	or	r25, r19
     fc0:	a4 2b       	or	r26, r20
     fc2:	b5 2b       	or	r27, r21
     fc4:	80 93 a4 02 	sts	0x02A4, r24
     fc8:	90 93 a5 02 	sts	0x02A5, r25
     fcc:	a0 93 a6 02 	sts	0x02A6, r26
     fd0:	b0 93 a7 02 	sts	0x02A7, r27
				fileSize = dir->fileSize;
     fd4:	84 8d       	ldd	r24, Z+28	; 0x1c
     fd6:	95 8d       	ldd	r25, Z+29	; 0x1d
     fd8:	a6 8d       	ldd	r26, Z+30	; 0x1e
     fda:	b7 8d       	ldd	r27, Z+31	; 0x1f
     fdc:	80 93 86 00 	sts	0x0086, r24
     fe0:	90 93 87 00 	sts	0x0087, r25
     fe4:	a0 93 88 00 	sts	0x0088, r26
     fe8:	b0 93 89 00 	sts	0x0089, r27
     fec:	fe c0       	rjmp	.+508    	; 0x11ea <findFiles+0x3a4>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
     fee:	8d e0       	ldi	r24, 0x0D	; 13
     ff0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     ff4:	8a e0       	ldi	r24, 0x0A	; 10
     ff6:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
     ffa:	81 ea       	ldi	r24, 0xA1	; 161
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
				 TX_NEWLINE;
    1002:	8d e0       	ldi	r24, 0x0D	; 13
    1004:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1008:	8a e0       	ldi	r24, 0x0A	; 10
    100a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
				 TX_NEWLINE;
    100e:	8d e0       	ldi	r24, 0x0D	; 13
    1010:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    101a:	d8 01       	movw	r26, r16
    101c:	54 96       	adiw	r26, 0x14	; 20
    101e:	8d 91       	ld	r24, X+
    1020:	9c 91       	ld	r25, X
    1022:	55 97       	sbiw	r26, 0x15	; 21
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	5c 01       	movw	r10, r24
    102a:	99 24       	eor	r9, r9
    102c:	88 24       	eor	r8, r8
    102e:	f8 01       	movw	r30, r16
    1030:	82 8d       	ldd	r24, Z+26	; 0x1a
    1032:	93 8d       	ldd	r25, Z+27	; 0x1b
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	88 2a       	or	r8, r24
    103a:	99 2a       	or	r9, r25
    103c:	aa 2a       	or	r10, r26
    103e:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1040:	85 ee       	ldi	r24, 0xE5	; 229
    1042:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1044:	69 81       	ldd	r22, Y+1	; 0x01
    1046:	7a 81       	ldd	r23, Y+2	; 0x02
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1050:	d8 01       	movw	r26, r16
    1052:	5c 96       	adiw	r26, 0x1c	; 28
    1054:	4d 91       	ld	r20, X+
    1056:	5d 91       	ld	r21, X+
    1058:	6d 91       	ld	r22, X+
    105a:	7c 91       	ld	r23, X
    105c:	5f 97       	sbiw	r26, 0x1f	; 31
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 45 04 	call	0x88a	; 0x88a <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
				 if(firstCluster < cluster)
    1074:	86 16       	cp	r8, r22
    1076:	97 06       	cpc	r9, r23
    1078:	a8 06       	cpc	r10, r24
    107a:	b9 06       	cpc	r11, r25
    107c:	30 f4       	brcc	.+12     	; 0x108a <findFiles+0x244>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	a5 01       	movw	r20, r10
    1084:	94 01       	movw	r18, r8
    1086:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    108a:	c5 01       	movw	r24, r10
    108c:	b4 01       	movw	r22, r8
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	00 e0       	ldi	r16, 0x00	; 0
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    109c:	f6 2e       	mov	r15, r22
    109e:	e7 2e       	mov	r14, r23
    10a0:	d8 2e       	mov	r13, r24
    10a2:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    10a4:	c5 01       	movw	r24, r10
    10a6:	b4 01       	movw	r22, r8
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    10b6:	8f 2d       	mov	r24, r15
    10b8:	9e 2d       	mov	r25, r14
    10ba:	ad 2d       	mov	r26, r13
    10bc:	bc 2d       	mov	r27, r12
    10be:	4c 01       	movw	r8, r24
    10c0:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    10c2:	b7 ef       	ldi	r27, 0xF7	; 247
    10c4:	8b 16       	cp	r8, r27
    10c6:	bf ef       	ldi	r27, 0xFF	; 255
    10c8:	9b 06       	cpc	r9, r27
    10ca:	bf ef       	ldi	r27, 0xFF	; 255
    10cc:	ab 06       	cpc	r10, r27
    10ce:	bf e0       	ldi	r27, 0x0F	; 15
    10d0:	bb 06       	cpc	r11, r27
    10d2:	d8 f2       	brcs	.-74     	; 0x108a <findFiles+0x244>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    10d4:	83 e9       	ldi	r24, 0x93	; 147
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	84 c0       	rjmp	.+264    	; 0x11e2 <findFiles+0x39c>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    10da:	8d e0       	ldi	r24, 0x0D	; 13
    10dc:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    10e0:	8a e0       	ldi	r24, 0x0A	; 10
    10e2:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    10e6:	1a 86       	std	Y+10, r1	; 0x0a
    10e8:	19 86       	std	Y+9, r1	; 0x09
    10ea:	0b c0       	rjmp	.+22     	; 0x1102 <findFiles+0x2bc>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    10ec:	e9 85       	ldd	r30, Y+9	; 0x09
    10ee:	e7 30       	cpi	r30, 0x07	; 7
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <findFiles+0x2b2>
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	9a 87       	std	Y+10, r25	; 0x0a
    1100:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
    1102:	e9 85       	ldd	r30, Y+9	; 0x09
    1104:	fa 85       	ldd	r31, Y+10	; 0x0a
    1106:	e0 0f       	add	r30, r16
    1108:	f1 1f       	adc	r31, r17
    110a:	80 81       	ld	r24, Z
    110c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1110:	a9 85       	ldd	r26, Y+9	; 0x09
    1112:	ba 85       	ldd	r27, Y+10	; 0x0a
    1114:	1a 97       	sbiw	r26, 0x0a	; 10
    1116:	51 f7       	brne	.-44     	; 0x10ec <findFiles+0x2a6>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    1118:	8f e8       	ldi	r24, 0x8F	; 143
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1120:	87 01       	movw	r16, r14
    1122:	08 56       	subi	r16, 0x68	; 104
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	05 51       	subi	r16, 0x15	; 21
    1128:	10 40       	sbci	r17, 0x00	; 0
    112a:	f8 01       	movw	r30, r16
    112c:	80 81       	ld	r24, Z
    112e:	0b 5e       	subi	r16, 0xEB	; 235
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	80 31       	cpi	r24, 0x10	; 16
    1134:	b1 f0       	breq	.+44     	; 0x1162 <findFiles+0x31c>
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	19 f4       	brne	.+6      	; 0x1140 <findFiles+0x2fa>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    113a:	8d e7       	ldi	r24, 0x7D	; 125
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	13 c0       	rjmp	.+38     	; 0x1166 <findFiles+0x320>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    1140:	8a e8       	ldi	r24, 0x8A	; 138
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
		         transmitString_F (PSTR("   "));
    1148:	86 e8       	ldi	r24, 0x86	; 134
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
			     displayMemory (dir->fileSize);
    1150:	f8 01       	movw	r30, r16
    1152:	34 97       	sbiw	r30, 0x04	; 4
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	0e 94 4d 02 	call	0x49a	; 0x49a <displayMemory>
    1160:	04 c0       	rjmp	.+8      	; 0x116a <findFiles+0x324>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1162:	82 e8       	ldi	r24, 0x82	; 130
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	e8 0e       	add	r14, r24
    1170:	f9 1e       	adc	r15, r25
    1172:	a7 01       	movw	r20, r14
    1174:	40 52       	subi	r20, 0x20	; 32
    1176:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1178:	80 91 8a 00 	lds	r24, 0x008A
    117c:	90 91 8b 00 	lds	r25, 0x008B
    1180:	48 17       	cp	r20, r24
    1182:	59 07       	cpc	r21, r25
    1184:	08 f4       	brcc	.+2      	; 0x1188 <findFiles+0x342>
    1186:	b8 ce       	rjmp	.-656    	; 0xef8 <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1188:	08 94       	sec
    118a:	61 1c       	adc	r6, r1
    118c:	71 1c       	adc	r7, r1
    118e:	81 1c       	adc	r8, r1
    1190:	91 1c       	adc	r9, r1
    1192:	80 91 98 02 	lds	r24, 0x0298
    1196:	90 91 99 02 	lds	r25, 0x0299
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	68 16       	cp	r6, r24
    11a0:	79 06       	cpc	r7, r25
    11a2:	8a 06       	cpc	r8, r26
    11a4:	9b 06       	cpc	r9, r27
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <findFiles+0x364>
    11a8:	95 ce       	rjmp	.-726    	; 0xed4 <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    11aa:	c6 01       	movw	r24, r12
    11ac:	b5 01       	movw	r22, r10
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	00 e0       	ldi	r16, 0x00	; 0
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    11bc:	5b 01       	movw	r10, r22
    11be:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    11c0:	97 ef       	ldi	r25, 0xF7	; 247
    11c2:	a9 16       	cp	r10, r25
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	b9 06       	cpc	r11, r25
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	c9 06       	cpc	r12, r25
    11cc:	9f e0       	ldi	r25, 0x0F	; 15
    11ce:	d9 06       	cpc	r13, r25
    11d0:	50 f4       	brcc	.+20     	; 0x11e6 <findFiles+0x3a0>
   	 return 0;
   if(cluster == 0) 
    11d2:	a1 14       	cp	r10, r1
    11d4:	b1 04       	cpc	r11, r1
    11d6:	c1 04       	cpc	r12, r1
    11d8:	d1 04       	cpc	r13, r1
    11da:	09 f0       	breq	.+2      	; 0x11de <findFiles+0x398>
    11dc:	5b ce       	rjmp	.-842    	; 0xe94 <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    11de:	84 e6       	ldi	r24, 0x64	; 100
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    11ea:	c8 01       	movw	r24, r16
    11ec:	2a 96       	adiw	r28, 0x0a	; 10
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	9f 90       	pop	r9
    120e:	8f 90       	pop	r8
    1210:	7f 90       	pop	r7
    1212:	6f 90       	pop	r6
    1214:	5f 90       	pop	r5
    1216:	4f 90       	pop	r4
    1218:	3f 90       	pop	r3
    121a:	2f 90       	pop	r2
    121c:	08 95       	ret

0000121e <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1224:	0e 94 ac 02 	call	0x558	; 0x558 <convertFileName>
  if(error) return;
    1228:	88 23       	and	r24, r24
    122a:	21 f4       	brne	.+8      	; 0x1234 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	be 01       	movw	r22, r28
    1230:	0e 94 23 07 	call	0xe46	; 0xe46 <findFiles>
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    123a:	2f 92       	push	r2
    123c:	3f 92       	push	r3
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <readFile+0x26>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <readFile+0x28>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	e8 2e       	mov	r14, r24
    1268:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    126a:	cb 01       	movw	r24, r22
    126c:	0e 94 ac 02 	call	0x558	; 0x558 <convertFileName>
if(error) return 2;
    1270:	88 23       	and	r24, r24
    1272:	11 f0       	breq	.+4      	; 0x1278 <readFile+0x3e>
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	9b c0       	rjmp	.+310    	; 0x13ae <readFile+0x174>

dir = findFiles (GET_FILE, fileName); //get the file location
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	b8 01       	movw	r22, r16
    127c:	0e 94 23 07 	call	0xe46	; 0xe46 <findFiles>
    1280:	9c 01       	movw	r18, r24
if(dir == 0) 
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	09 f4       	brne	.+2      	; 0x1288 <readFile+0x4e>
    1286:	92 c0       	rjmp	.+292    	; 0x13ac <readFile+0x172>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	e8 16       	cp	r14, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <readFile+0x56>
    128e:	8f c0       	rjmp	.+286    	; 0x13ae <readFile+0x174>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1290:	d9 01       	movw	r26, r18
    1292:	54 96       	adiw	r26, 0x14	; 20
    1294:	8d 91       	ld	r24, X+
    1296:	9c 91       	ld	r25, X
    1298:	55 97       	sbiw	r26, 0x15	; 21
    129a:	a0 e0       	ldi	r26, 0x00	; 0
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	4c 01       	movw	r8, r24
    12a0:	77 24       	eor	r7, r7
    12a2:	66 24       	eor	r6, r6
    12a4:	f9 01       	movw	r30, r18
    12a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    12a8:	93 8d       	ldd	r25, Z+27	; 0x1b
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	68 2a       	or	r6, r24
    12b0:	79 2a       	or	r7, r25
    12b2:	8a 2a       	or	r8, r26
    12b4:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    12b6:	d9 01       	movw	r26, r18
    12b8:	5c 96       	adiw	r26, 0x1c	; 28
    12ba:	8d 91       	ld	r24, X+
    12bc:	9d 91       	ld	r25, X+
    12be:	0d 90       	ld	r0, X+
    12c0:	bc 91       	ld	r27, X
    12c2:	a0 2d       	mov	r26, r0
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	ab 83       	std	Y+3, r26	; 0x03
    12ca:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    12cc:	8d e0       	ldi	r24, 0x0D	; 13
    12ce:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
TX_NEWLINE;
    12d8:	8d e0       	ldi	r24, 0x0D	; 13
    12da:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    12e4:	22 24       	eor	r2, r2
    12e6:	33 24       	eor	r3, r3
    12e8:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    12ea:	20 91 98 02 	lds	r18, 0x0298
    12ee:	30 91 99 02 	lds	r19, 0x0299
    12f2:	e0 90 82 00 	lds	r14, 0x0082
    12f6:	f0 90 83 00 	lds	r15, 0x0083
    12fa:	00 91 84 00 	lds	r16, 0x0084
    12fe:	10 91 85 00 	lds	r17, 0x0085
    1302:	c4 01       	movw	r24, r8
    1304:	b3 01       	movw	r22, r6
    1306:	62 50       	subi	r22, 0x02	; 2
    1308:	70 40       	sbci	r23, 0x00	; 0
    130a:	80 40       	sbci	r24, 0x00	; 0
    130c:	90 40       	sbci	r25, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    1316:	5b 01       	movw	r10, r22
    1318:	6c 01       	movw	r12, r24
    131a:	ae 0c       	add	r10, r14
    131c:	bf 1c       	adc	r11, r15
    131e:	c0 1e       	adc	r12, r16
    1320:	d1 1e       	adc	r13, r17
    1322:	ee 24       	eor	r14, r14
    1324:	25 c0       	rjmp	.+74     	; 0x1370 <readFile+0x136>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    1326:	c6 01       	movw	r24, r12
    1328:	b5 01       	movw	r22, r10
    132a:	6e 0d       	add	r22, r14
    132c:	71 1d       	adc	r23, r1
    132e:	81 1d       	adc	r24, r1
    1330:	91 1d       	adc	r25, r1
    1332:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
    1336:	00 e0       	ldi	r16, 0x00	; 0
    1338:	10 e0       	ldi	r17, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    133a:	f8 01       	movw	r30, r16
    133c:	e8 56       	subi	r30, 0x68	; 104
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	ab 81       	ldd	r26, Y+3	; 0x03
    134c:	bc 81       	ldd	r27, Y+4	; 0x04
    134e:	28 16       	cp	r2, r24
    1350:	39 06       	cpc	r3, r25
    1352:	4a 06       	cpc	r4, r26
    1354:	5b 06       	cpc	r5, r27
    1356:	50 f5       	brcc	.+84     	; 0x13ac <readFile+0x172>
    1358:	08 94       	sec
    135a:	21 1c       	adc	r2, r1
    135c:	31 1c       	adc	r3, r1
    135e:	41 1c       	adc	r4, r1
    1360:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1362:	0f 5f       	subi	r16, 0xFF	; 255
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	00 30       	cpi	r16, 0x00	; 0
    136a:	19 07       	cpc	r17, r25
    136c:	31 f7       	brne	.-52     	; 0x133a <readFile+0x100>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    136e:	e3 94       	inc	r14
    1370:	20 91 98 02 	lds	r18, 0x0298
    1374:	30 91 99 02 	lds	r19, 0x0299
    1378:	8e 2d       	mov	r24, r14
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	82 17       	cp	r24, r18
    137e:	93 07       	cpc	r25, r19
    1380:	90 f2       	brcs	.-92     	; 0x1326 <readFile+0xec>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1382:	c4 01       	movw	r24, r8
    1384:	b3 01       	movw	r22, r6
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	00 e0       	ldi	r16, 0x00	; 0
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    1394:	3b 01       	movw	r6, r22
    1396:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1398:	61 15       	cp	r22, r1
    139a:	71 05       	cpc	r23, r1
    139c:	81 05       	cpc	r24, r1
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <readFile+0x16a>
    13a2:	a3 cf       	rjmp	.-186    	; 0x12ea <readFile+0xb0>
    13a4:	8b e4       	ldi	r24, 0x4B	; 75
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	7f 90       	pop	r7
    13d0:	6f 90       	pop	r6
    13d2:	5f 90       	pop	r5
    13d4:	4f 90       	pop	r4
    13d6:	3f 90       	pop	r3
    13d8:	2f 90       	pop	r2
    13da:	08 95       	ret

000013dc <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    13dc:	2f 92       	push	r2
    13de:	3f 92       	push	r3
    13e0:	4f 92       	push	r4
    13e2:	5f 92       	push	r5
    13e4:	6f 92       	push	r6
    13e6:	7f 92       	push	r7
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <writeFile+0x26>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <writeFile+0x28>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <writeFile+0x2a>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	6d 81       	ldd	r22, Y+5	; 0x05
    1412:	7e 81       	ldd	r23, Y+6	; 0x06
    1414:	0e 94 1d 09 	call	0x123a	; 0x123a <readFile>

if(j == 1) 
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	09 f0       	breq	.+2      	; 0x141e <writeFile+0x42>
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <writeFile+0xf0>
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    141e:	8e e0       	ldi	r24, 0x0E	; 14
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    1426:	60 90 a4 02 	lds	r6, 0x02A4
    142a:	70 90 a5 02 	lds	r7, 0x02A5
    142e:	80 90 a6 02 	lds	r8, 0x02A6
    1432:	90 90 a7 02 	lds	r9, 0x02A7
    1436:	aa 24       	eor	r10, r10
    1438:	bb 24       	eor	r11, r11
    143a:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    143c:	c4 01       	movw	r24, r8
    143e:	b3 01       	movw	r22, r6
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	00 e0       	ldi	r16, 0x00	; 0
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    if(nextCluster == EOF) break;
    144e:	6f 3f       	cpi	r22, 0xFF	; 255
    1450:	2f ef       	ldi	r18, 0xFF	; 255
    1452:	72 07       	cpc	r23, r18
    1454:	2f ef       	ldi	r18, 0xFF	; 255
    1456:	82 07       	cpc	r24, r18
    1458:	2f e0       	ldi	r18, 0x0F	; 15
    145a:	92 07       	cpc	r25, r18
    145c:	41 f0       	breq	.+16     	; 0x146e <writeFile+0x92>
	cluster = nextCluster;
	clusterCount++;
    145e:	08 94       	sec
    1460:	a1 1c       	adc	r10, r1
    1462:	b1 1c       	adc	r11, r1
    1464:	c1 1c       	adc	r12, r1
    1466:	d1 1c       	adc	r13, r1
    1468:	3b 01       	movw	r6, r22
    146a:	4c 01       	movw	r8, r24
    146c:	e7 cf       	rjmp	.-50     	; 0x143c <writeFile+0x60>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    146e:	20 91 98 02 	lds	r18, 0x0298
    1472:	30 91 99 02 	lds	r19, 0x0299
    1476:	60 91 8a 00 	lds	r22, 0x008A
    147a:	70 91 8b 00 	lds	r23, 0x008B
    147e:	e0 90 8a 00 	lds	r14, 0x008A
    1482:	f0 90 8b 00 	lds	r15, 0x008B
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    1492:	a6 01       	movw	r20, r12
    1494:	95 01       	movw	r18, r10
    1496:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	60 91 86 00 	lds	r22, 0x0086
    14a2:	70 91 87 00 	lds	r23, 0x0087
    14a6:	80 91 88 00 	lds	r24, 0x0088
    14aa:	90 91 89 00 	lds	r25, 0x0089
    14ae:	62 1b       	sub	r22, r18
    14b0:	73 0b       	sbc	r23, r19
    14b2:	84 0b       	sbc	r24, r20
    14b4:	95 0b       	sbc	r25, r21
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	a8 01       	movw	r20, r16
    14bc:	97 01       	movw	r18, r14
    14be:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
    14c2:	b2 2e       	mov	r11, r18
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	aa 24       	eor	r10, r10
    14c8:	a3 94       	inc	r10
    14ca:	58 c0       	rjmp	.+176    	; 0x157c <writeFile+0x1a0>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <writeFile+0xf6>
    14d0:	00 c3       	rjmp	.+1536   	; 0x1ad2 <writeFile+0x6f6>
   return; //invalid file name
else
{
  TX_NEWLINE;
    14d2:	8d e0       	ldi	r24, 0x0D	; 13
    14d4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    14de:	8d ef       	ldi	r24, 0xFD	; 253
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>
    14f6:	9b 01       	movw	r18, r22
    14f8:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    14fa:	80 91 8c 00 	lds	r24, 0x008C
    14fe:	90 91 8d 00 	lds	r25, 0x008D
    1502:	a0 91 8e 00 	lds	r26, 0x008E
    1506:	b0 91 8f 00 	lds	r27, 0x008F
    150a:	82 17       	cp	r24, r18
    150c:	93 07       	cpc	r25, r19
    150e:	a4 07       	cpc	r26, r20
    1510:	b5 07       	cpc	r27, r21
    1512:	40 f4       	brcc	.+16     	; 0x1524 <writeFile+0x148>
     cluster = rootCluster;
    1514:	20 91 90 00 	lds	r18, 0x0090
    1518:	30 91 91 00 	lds	r19, 0x0091
    151c:	40 91 92 00 	lds	r20, 0x0092
    1520:	50 91 93 00 	lds	r21, 0x0093

  cluster = searchNextFreeCluster(cluster);
    1524:	ca 01       	movw	r24, r20
    1526:	b9 01       	movw	r22, r18
    1528:	0e 94 34 03 	call	0x668	; 0x668 <searchNextFreeCluster>
    152c:	3b 01       	movw	r6, r22
    152e:	4c 01       	movw	r8, r24
   if(cluster == 0)
    1530:	61 15       	cp	r22, r1
    1532:	71 05       	cpc	r23, r1
    1534:	81 05       	cpc	r24, r1
    1536:	91 05       	cpc	r25, r1
    1538:	49 f4       	brne	.+18     	; 0x154c <writeFile+0x170>
   {
      TX_NEWLINE;
    153a:	8d e0       	ldi	r24, 0x0D	; 13
    153c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1546:	8b ee       	ldi	r24, 0xEB	; 235
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	c1 c2       	rjmp	.+1410   	; 0x1ace <writeFile+0x6f2>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0f ef       	ldi	r16, 0xFF	; 255
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	2f ef       	ldi	r18, 0xFF	; 255
    1554:	3f e0       	ldi	r19, 0x0F	; 15
    1556:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    155a:	c4 01       	movw	r24, r8
    155c:	aa 27       	eor	r26, r26
    155e:	bb 27       	eor	r27, r27
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	8b 83       	std	Y+3, r24	; 0x03
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1564:	7a 82       	std	Y+2, r7	; 0x02
    1566:	69 82       	std	Y+1, r6	; 0x01
  fileSize = 0;
    1568:	10 92 86 00 	sts	0x0086, r1
    156c:	10 92 87 00 	sts	0x0087, r1
    1570:	10 92 88 00 	sts	0x0088, r1
    1574:	10 92 89 00 	sts	0x0089, r1
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	aa 24       	eor	r10, r10
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    157c:	2b 2c       	mov	r2, r11
    157e:	33 24       	eor	r3, r3
    1580:	44 24       	eor	r4, r4
    1582:	55 24       	eor	r5, r5
    1584:	c4 01       	movw	r24, r8
    1586:	b3 01       	movw	r22, r6
    1588:	62 50       	subi	r22, 0x02	; 2
    158a:	70 40       	sbci	r23, 0x00	; 0
    158c:	80 40       	sbci	r24, 0x00	; 0
    158e:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    1590:	22 23       	and	r18, r18
    1592:	e9 f1       	breq	.+122    	; 0x160e <writeFile+0x232>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1594:	20 91 98 02 	lds	r18, 0x0298
    1598:	30 91 99 02 	lds	r19, 0x0299
    159c:	e0 90 82 00 	lds	r14, 0x0082
    15a0:	f0 90 83 00 	lds	r15, 0x0083
    15a4:	00 91 84 00 	lds	r16, 0x0084
    15a8:	10 91 85 00 	lds	r17, 0x0085
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    15ac:	e2 0c       	add	r14, r2
    15ae:	f3 1c       	adc	r15, r3
    15b0:	04 1d       	adc	r16, r4
    15b2:	15 1d       	adc	r17, r5
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    15bc:	e6 0e       	add	r14, r22
    15be:	f7 1e       	adc	r15, r23
    15c0:	08 1f       	adc	r16, r24
    15c2:	19 1f       	adc	r17, r25
    15c4:	e0 92 94 00 	sts	0x0094, r14
    15c8:	f0 92 95 00 	sts	0x0095, r15
    15cc:	00 93 96 00 	sts	0x0096, r16
    15d0:	10 93 97 00 	sts	0x0097, r17
	  SD_readSingleBlock (startBlock);
    15d4:	60 91 94 00 	lds	r22, 0x0094
    15d8:	70 91 95 00 	lds	r23, 0x0095
    15dc:	80 91 96 00 	lds	r24, 0x0096
    15e0:	90 91 97 00 	lds	r25, 0x0097
    15e4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    15e8:	20 91 8a 00 	lds	r18, 0x008A
    15ec:	30 91 8b 00 	lds	r19, 0x008B
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	60 91 86 00 	lds	r22, 0x0086
    15f8:	70 91 87 00 	lds	r23, 0x0087
    15fc:	80 91 88 00 	lds	r24, 0x0088
    1600:	90 91 89 00 	lds	r25, 0x0089
    1604:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
    1608:	8b 01       	movw	r16, r22
    160a:	eb 2c       	mov	r14, r11
    160c:	1f c0       	rjmp	.+62     	; 0x164c <writeFile+0x270>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    160e:	20 91 98 02 	lds	r18, 0x0298
    1612:	30 91 99 02 	lds	r19, 0x0299
    1616:	e0 90 82 00 	lds	r14, 0x0082
    161a:	f0 90 83 00 	lds	r15, 0x0083
    161e:	00 91 84 00 	lds	r16, 0x0084
    1622:	10 91 85 00 	lds	r17, 0x0085
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    162e:	e6 0e       	add	r14, r22
    1630:	f7 1e       	adc	r15, r23
    1632:	08 1f       	adc	r16, r24
    1634:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1636:	e0 92 94 00 	sts	0x0094, r14
    163a:	f0 92 95 00 	sts	0x0095, r15
    163e:	00 93 96 00 	sts	0x0096, r16
    1642:	10 93 97 00 	sts	0x0097, r17
    1646:	ee 24       	eor	r14, r14
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
	  i=0;
	  j=0;
   }
   

   TX_NEWLINE;
    164c:	8d e0       	ldi	r24, 0x0D	; 13
    164e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1652:	8a e0       	ldi	r24, 0x0A	; 10
    1654:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    1658:	81 ed       	ldi	r24, 0xD1	; 209
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
   
   do
   {
     data = receiveByte();
    1660:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1664:	f8 2e       	mov	r15, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1666:	88 e0       	ldi	r24, 0x08	; 8
    1668:	f8 16       	cp	r15, r24
    166a:	09 f5       	brne	.+66     	; 0x16ae <writeFile+0x2d2>
	 { 
	   if(i != 0)
    166c:	01 15       	cp	r16, r1
    166e:	11 05       	cpc	r17, r1
    1670:	b9 f3       	breq	.-18     	; 0x1660 <writeFile+0x284>
	   { 
	     transmitByte(data);
    1672:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
		 transmitByte(' '); 
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
	     transmitByte(data); 
    167c:	88 e0       	ldi	r24, 0x08	; 8
    167e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
	     i--; 
    1682:	01 50       	subi	r16, 0x01	; 1
    1684:	10 40       	sbci	r17, 0x00	; 0
		 fileSize--;
    1686:	80 91 86 00 	lds	r24, 0x0086
    168a:	90 91 87 00 	lds	r25, 0x0087
    168e:	a0 91 88 00 	lds	r26, 0x0088
    1692:	b0 91 89 00 	lds	r27, 0x0089
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	a1 09       	sbc	r26, r1
    169a:	b1 09       	sbc	r27, r1
    169c:	80 93 86 00 	sts	0x0086, r24
    16a0:	90 93 87 00 	sts	0x0087, r25
    16a4:	a0 93 88 00 	sts	0x0088, r26
    16a8:	b0 93 89 00 	sts	0x0089, r27
    16ac:	d9 cf       	rjmp	.-78     	; 0x1660 <writeFile+0x284>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    16ae:	8f 2d       	mov	r24, r15
    16b0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
     buffer[i++] = data;
    16b4:	f8 01       	movw	r30, r16
    16b6:	e8 56       	subi	r30, 0x68	; 104
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	f0 82       	st	Z, r15
    16bc:	0f 5f       	subi	r16, 0xFF	; 255
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
	 fileSize++;
    16c0:	80 91 86 00 	lds	r24, 0x0086
    16c4:	90 91 87 00 	lds	r25, 0x0087
    16c8:	a0 91 88 00 	lds	r26, 0x0088
    16cc:	b0 91 89 00 	lds	r27, 0x0089
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	a1 1d       	adc	r26, r1
    16d4:	b1 1d       	adc	r27, r1
    16d6:	80 93 86 00 	sts	0x0086, r24
    16da:	90 93 87 00 	sts	0x0087, r25
    16de:	a0 93 88 00 	sts	0x0088, r26
    16e2:	b0 93 89 00 	sts	0x0089, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    16e6:	9d e0       	ldi	r25, 0x0D	; 13
    16e8:	f9 16       	cp	r15, r25
    16ea:	e9 f4       	brne	.+58     	; 0x1726 <writeFile+0x34a>
     {
        transmitByte ('\n');
    16ec:	8a e0       	ldi	r24, 0x0A	; 10
    16ee:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    16f2:	f8 01       	movw	r30, r16
    16f4:	e8 56       	subi	r30, 0x68	; 104
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	80 83       	st	Z, r24
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
		fileSize++;
    1700:	80 91 86 00 	lds	r24, 0x0086
    1704:	90 91 87 00 	lds	r25, 0x0087
    1708:	a0 91 88 00 	lds	r26, 0x0088
    170c:	b0 91 89 00 	lds	r27, 0x0089
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	a1 1d       	adc	r26, r1
    1714:	b1 1d       	adc	r27, r1
    1716:	80 93 86 00 	sts	0x0086, r24
    171a:	90 93 87 00 	sts	0x0087, r25
    171e:	a0 93 88 00 	sts	0x0088, r26
    1722:	b0 93 89 00 	sts	0x0089, r27
     }
	 
     if(i == 512) 
    1726:	a2 e0       	ldi	r26, 0x02	; 2
    1728:	00 30       	cpi	r16, 0x00	; 0
    172a:	1a 07       	cpc	r17, r26
    172c:	49 f5       	brne	.+82     	; 0x1780 <writeFile+0x3a4>
	 {
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    172e:	60 91 94 00 	lds	r22, 0x0094
    1732:	70 91 95 00 	lds	r23, 0x0095
    1736:	80 91 96 00 	lds	r24, 0x0096
    173a:	90 91 97 00 	lds	r25, 0x0097
    173e:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
       j++;
    1742:	e3 94       	inc	r14
	   if(j == sectorPerCluster) {j = 0; break;}
    1744:	20 91 98 02 	lds	r18, 0x0298
    1748:	30 91 99 02 	lds	r19, 0x0299
    174c:	8e 2d       	mov	r24, r14
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	d1 f0       	breq	.+52     	; 0x178a <writeFile+0x3ae>
	   startBlock++; 
    1756:	80 91 94 00 	lds	r24, 0x0094
    175a:	90 91 95 00 	lds	r25, 0x0095
    175e:	a0 91 96 00 	lds	r26, 0x0096
    1762:	b0 91 97 00 	lds	r27, 0x0097
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	a1 1d       	adc	r26, r1
    176a:	b1 1d       	adc	r27, r1
    176c:	80 93 94 00 	sts	0x0094, r24
    1770:	90 93 95 00 	sts	0x0095, r25
    1774:	a0 93 96 00 	sts	0x0096, r26
    1778:	b0 93 97 00 	sts	0x0097, r27
    177c:	00 e0       	ldi	r16, 0x00	; 0
    177e:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');
    1780:	be e7       	ldi	r27, 0x7E	; 126
    1782:	fb 16       	cp	r15, r27
    1784:	09 f0       	breq	.+2      	; 0x1788 <writeFile+0x3ac>
    1786:	6c cf       	rjmp	.-296    	; 0x1660 <writeFile+0x284>
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <writeFile+0x3b8>

   if(data == '~') 
    178a:	ee e7       	ldi	r30, 0x7E	; 126
    178c:	fe 16       	cp	r15, r30
    178e:	b9 f5       	brne	.+110    	; 0x17fe <writeFile+0x422>
    1790:	00 e0       	ldi	r16, 0x00	; 0
    1792:	10 e0       	ldi	r17, 0x00	; 0
   {
      fileSize--;	//to remove the last entered '~' character
    1794:	80 91 86 00 	lds	r24, 0x0086
    1798:	90 91 87 00 	lds	r25, 0x0087
    179c:	a0 91 88 00 	lds	r26, 0x0088
    17a0:	b0 91 89 00 	lds	r27, 0x0089
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	a1 09       	sbc	r26, r1
    17a8:	b1 09       	sbc	r27, r1
    17aa:	80 93 86 00 	sts	0x0086, r24
    17ae:	90 93 87 00 	sts	0x0087, r25
    17b2:	a0 93 88 00 	sts	0x0088, r26
    17b6:	b0 93 89 00 	sts	0x0089, r27
	  i--;
    17ba:	b8 01       	movw	r22, r16
    17bc:	61 50       	subi	r22, 0x01	; 1
    17be:	70 40       	sbci	r23, 0x00	; 0
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <writeFile+0x3f2>
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    17c2:	fb 01       	movw	r30, r22
    17c4:	e8 56       	subi	r30, 0x68	; 104
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    17ca:	6f 5f       	subi	r22, 0xFF	; 255
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	f2 e0       	ldi	r31, 0x02	; 2
    17d0:	60 30       	cpi	r22, 0x00	; 0
    17d2:	7f 07       	cpc	r23, r31
    17d4:	b0 f3       	brcs	.-20     	; 0x17c2 <writeFile+0x3e6>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    17d6:	60 91 94 00 	lds	r22, 0x0094
    17da:	70 91 95 00 	lds	r23, 0x0095
    17de:	80 91 96 00 	lds	r24, 0x0096
    17e2:	90 91 97 00 	lds	r25, 0x0097
    17e6:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	a4 01       	movw	r20, r8
    17f0:	93 01       	movw	r18, r6
    17f2:	0e 94 be 03 	call	0x77c	; 0x77c <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    17f6:	aa 20       	and	r10, r10
    17f8:	09 f4       	brne	.+2      	; 0x17fc <writeFile+0x420>
    17fa:	6f c0       	rjmp	.+222    	; 0x18da <writeFile+0x4fe>
    17fc:	28 c0       	rjmp	.+80     	; 0x184e <writeFile+0x472>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    17fe:	c4 01       	movw	r24, r8
    1800:	b3 01       	movw	r22, r6
    1802:	0e 94 34 03 	call	0x668	; 0x668 <searchNextFreeCluster>
    1806:	6b 01       	movw	r12, r22
    1808:	7c 01       	movw	r14, r24

   if(cluster == 0)
    180a:	61 15       	cp	r22, r1
    180c:	71 05       	cpc	r23, r1
    180e:	81 05       	cpc	r24, r1
    1810:	91 05       	cpc	r25, r1
    1812:	49 f4       	brne	.+18     	; 0x1826 <writeFile+0x44a>
   {
      TX_NEWLINE;
    1814:	8d e0       	ldi	r24, 0x0D	; 13
    1816:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    181a:	8a e0       	ldi	r24, 0x0A	; 10
    181c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1820:	8f eb       	ldi	r24, 0xBF	; 191
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	54 c1       	rjmp	.+680    	; 0x1ace <writeFile+0x6f2>
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1826:	c4 01       	movw	r24, r8
    1828:	b3 01       	movw	r22, r6
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	97 01       	movw	r18, r14
    182e:	86 01       	movw	r16, r12
    1830:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1834:	c7 01       	movw	r24, r14
    1836:	b6 01       	movw	r22, r12
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0f ef       	ldi	r16, 0xFF	; 255
    183c:	1f ef       	ldi	r17, 0xFF	; 255
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	3f e0       	ldi	r19, 0x0F	; 15
    1842:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	36 01       	movw	r6, r12
    184a:	47 01       	movw	r8, r14
    184c:	9b ce       	rjmp	.-714    	; 0x1584 <writeFile+0x1a8>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    184e:	60 91 a9 02 	lds	r22, 0x02A9
    1852:	70 91 aa 02 	lds	r23, 0x02AA
    1856:	80 91 ab 02 	lds	r24, 0x02AB
    185a:	90 91 ac 02 	lds	r25, 0x02AC
    185e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1862:	e0 91 7e 00 	lds	r30, 0x007E
    1866:	f0 91 7f 00 	lds	r31, 0x007F
    186a:	e8 56       	subi	r30, 0x68	; 104
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
  extraMemory = fileSize - dir->fileSize;
    186e:	20 91 86 00 	lds	r18, 0x0086
    1872:	30 91 87 00 	lds	r19, 0x0087
    1876:	40 91 88 00 	lds	r20, 0x0088
    187a:	50 91 89 00 	lds	r21, 0x0089
    187e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1880:	95 8d       	ldd	r25, Z+29	; 0x1d
    1882:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1884:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1886:	79 01       	movw	r14, r18
    1888:	8a 01       	movw	r16, r20
    188a:	e8 1a       	sub	r14, r24
    188c:	f9 0a       	sbc	r15, r25
    188e:	0a 0b       	sbc	r16, r26
    1890:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    1892:	24 8f       	std	Z+28, r18	; 0x1c
    1894:	35 8f       	std	Z+29, r19	; 0x1d
    1896:	46 8f       	std	Z+30, r20	; 0x1e
    1898:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    189a:	60 91 a9 02 	lds	r22, 0x02A9
    189e:	70 91 aa 02 	lds	r23, 0x02AA
    18a2:	80 91 ab 02 	lds	r24, 0x02AB
    18a6:	90 91 ac 02 	lds	r25, 0x02AC
    18aa:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	b8 01       	movw	r22, r16
    18b2:	a7 01       	movw	r20, r14
    18b4:	0e 94 45 04 	call	0x88a	; 0x88a <freeMemoryUpdate>

  
  TX_NEWLINE;
    18b8:	8d e0       	ldi	r24, 0x0D	; 13
    18ba:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    18be:	8a e0       	ldi	r24, 0x0A	; 10
    18c0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    18c4:	8f ea       	ldi	r24, 0xAF	; 175
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
  TX_NEWLINE;
    18cc:	8d e0       	ldi	r24, 0x0D	; 13
    18ce:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    18d2:	8a e0       	ldi	r24, 0x0A	; 10
    18d4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    18d8:	fc c0       	rjmp	.+504    	; 0x1ad2 <writeFile+0x6f6>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    18da:	80 90 90 00 	lds	r8, 0x0090
    18de:	90 90 91 00 	lds	r9, 0x0091
    18e2:	a0 90 92 00 	lds	r10, 0x0092
    18e6:	b0 90 93 00 	lds	r11, 0x0093
    18ea:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    18ec:	20 91 98 02 	lds	r18, 0x0298
    18f0:	30 91 99 02 	lds	r19, 0x0299
    18f4:	e0 90 82 00 	lds	r14, 0x0082
    18f8:	f0 90 83 00 	lds	r15, 0x0083
    18fc:	00 91 84 00 	lds	r16, 0x0084
    1900:	10 91 85 00 	lds	r17, 0x0085
    1904:	c5 01       	movw	r24, r10
    1906:	b4 01       	movw	r22, r8
    1908:	62 50       	subi	r22, 0x02	; 2
    190a:	70 40       	sbci	r23, 0x00	; 0
    190c:	80 40       	sbci	r24, 0x00	; 0
    190e:	90 40       	sbci	r25, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__mulsi3>
    1918:	2b 01       	movw	r4, r22
    191a:	3c 01       	movw	r6, r24
    191c:	4e 0c       	add	r4, r14
    191e:	5f 1c       	adc	r5, r15
    1920:	60 1e       	adc	r6, r16
    1922:	71 1e       	adc	r7, r17
    1924:	33 24       	eor	r3, r3
    1926:	8a c0       	rjmp	.+276    	; 0x1a3c <writeFile+0x660>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    1928:	73 01       	movw	r14, r6
    192a:	62 01       	movw	r12, r4
    192c:	c3 0c       	add	r12, r3
    192e:	d1 1c       	adc	r13, r1
    1930:	e1 1c       	adc	r14, r1
    1932:	f1 1c       	adc	r15, r1
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
    193c:	00 e2       	ldi	r16, 0x20	; 32
    193e:	10 e0       	ldi	r17, 0x00	; 0
    1940:	72 c0       	rjmp	.+228    	; 0x1a26 <writeFile+0x64a>
	

     for(i=0; i<bytesPerSector; i+=32)
    1942:	af 01       	movw	r20, r30
    1944:	48 56       	subi	r20, 0x68	; 104
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1948:	22 20       	and	r2, r2
    194a:	19 f0       	breq	.+6      	; 0x1952 <writeFile+0x576>
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    194c:	da 01       	movw	r26, r20
    194e:	1c 92       	st	X, r1
    1950:	c0 c0       	rjmp	.+384    	; 0x1ad2 <writeFile+0x6f6>
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1952:	f8 01       	movw	r30, r16
    1954:	e8 58       	subi	r30, 0x88	; 136
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	e0 81       	ld	r30, Z
    195a:	ee 23       	and	r30, r30
    195c:	19 f0       	breq	.+6      	; 0x1964 <writeFile+0x588>
    195e:	e5 3e       	cpi	r30, 0xE5	; 229
    1960:	09 f0       	breq	.+2      	; 0x1964 <writeFile+0x588>
    1962:	5f c0       	rjmp	.+190    	; 0x1a22 <writeFile+0x646>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1968:	ba 01       	movw	r22, r20
    196a:	62 0f       	add	r22, r18
    196c:	73 1f       	adc	r23, r19
    196e:	ad 81       	ldd	r26, Y+5	; 0x05
    1970:	be 81       	ldd	r27, Y+6	; 0x06
    1972:	a2 0f       	add	r26, r18
    1974:	b3 1f       	adc	r27, r19
    1976:	8c 91       	ld	r24, X
    1978:	fb 01       	movw	r30, r22
    197a:	80 83       	st	Z, r24
    197c:	2f 5f       	subi	r18, 0xFF	; 255
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1980:	2b 30       	cpi	r18, 0x0B	; 11
    1982:	31 05       	cpc	r19, r1
    1984:	89 f7       	brne	.-30     	; 0x1968 <writeFile+0x58c>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1986:	f8 01       	movw	r30, r16
    1988:	e8 56       	subi	r30, 0x68	; 104
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	75 97       	sbiw	r30, 0x15	; 21
    198e:	20 e2       	ldi	r18, 0x20	; 32
    1990:	21 93       	st	Z+, r18
		  dir->NTreserved = 0;			//always set to 0
    1992:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    1994:	11 92       	st	Z+, r1
		  dir->createTime = 0x9684;		//fixed time of creation
    1996:	84 e8       	ldi	r24, 0x84	; 132
    1998:	96 e9       	ldi	r25, 0x96	; 150
    199a:	81 93       	st	Z+, r24
    199c:	91 93       	st	Z+, r25
		  dir->createDate = 0x3a37;		//fixed date of creation
    199e:	a7 e3       	ldi	r26, 0x37	; 55
    19a0:	ba e3       	ldi	r27, 0x3A	; 58
    19a2:	a1 93       	st	Z+, r26
    19a4:	b1 93       	st	Z+, r27
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    19a6:	b1 83       	std	Z+1, r27	; 0x01
    19a8:	a0 83       	st	Z, r26
		  dir->writeTime = 0x9684;		//fixed time of last write
    19aa:	34 96       	adiw	r30, 0x04	; 4
    19ac:	81 93       	st	Z+, r24
    19ae:	91 93       	st	Z+, r25
		  dir->writeDate = 0x3a37;		//fixed date of last write
    19b0:	b1 83       	std	Z+1, r27	; 0x01
    19b2:	a0 83       	st	Z, r26
		  dir->firstClusterHI = firstClusterHigh;
    19b4:	34 97       	sbiw	r30, 0x04	; 4
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    19be:	36 96       	adiw	r30, 0x06	; 6
    19c0:	a9 81       	ldd	r26, Y+1	; 0x01
    19c2:	ba 81       	ldd	r27, Y+2	; 0x02
    19c4:	a1 93       	st	Z+, r26
    19c6:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    19c8:	80 91 86 00 	lds	r24, 0x0086
    19cc:	90 91 87 00 	lds	r25, 0x0087
    19d0:	a0 91 88 00 	lds	r26, 0x0088
    19d4:	b0 91 89 00 	lds	r27, 0x0089
    19d8:	80 83       	st	Z, r24
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	a2 83       	std	Z+2, r26	; 0x02
    19de:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    19e0:	c7 01       	movw	r24, r14
    19e2:	b6 01       	movw	r22, r12
    19e4:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    19e8:	8d e0       	ldi	r24, 0x0D	; 13
    19ea:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
		  TX_NEWLINE;
    19f4:	8d e0       	ldi	r24, 0x0D	; 13
    19f6:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    19fa:	8a e0       	ldi	r24, 0x0A	; 10
    19fc:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
		  transmitString_F(PSTR(" File Created!"));
    1a00:	80 ea       	ldi	r24, 0xA0	; 160
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1a08:	40 91 86 00 	lds	r20, 0x0086
    1a0c:	50 91 87 00 	lds	r21, 0x0087
    1a10:	60 91 88 00 	lds	r22, 0x0088
    1a14:	70 91 89 00 	lds	r23, 0x0089
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 45 04 	call	0x88a	; 0x88a <freeMemoryUpdate>
    1a1e:	22 24       	eor	r2, r2
    1a20:	23 94       	inc	r2
    1a22:	00 5e       	subi	r16, 0xE0	; 224
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1a26:	80 91 8a 00 	lds	r24, 0x008A
    1a2a:	90 91 8b 00 	lds	r25, 0x008B
    1a2e:	f8 01       	movw	r30, r16
    1a30:	b0 97       	sbiw	r30, 0x20	; 32
    1a32:	e8 17       	cp	r30, r24
    1a34:	f9 07       	cpc	r31, r25
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <writeFile+0x65e>
    1a38:	84 cf       	rjmp	.-248    	; 0x1942 <writeFile+0x566>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1a3a:	33 94       	inc	r3
    1a3c:	20 91 98 02 	lds	r18, 0x0298
    1a40:	30 91 99 02 	lds	r19, 0x0299
    1a44:	83 2d       	mov	r24, r3
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	82 17       	cp	r24, r18
    1a4a:	93 07       	cpc	r25, r19
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <writeFile+0x674>
    1a4e:	6c cf       	rjmp	.-296    	; 0x1928 <writeFile+0x54c>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1a50:	c5 01       	movw	r24, r10
    1a52:	b4 01       	movw	r22, r8
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    1a62:	6b 01       	movw	r12, r22
    1a64:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1a66:	67 3f       	cpi	r22, 0xF7	; 247
    1a68:	bf ef       	ldi	r27, 0xFF	; 255
    1a6a:	7b 07       	cpc	r23, r27
    1a6c:	bf ef       	ldi	r27, 0xFF	; 255
    1a6e:	8b 07       	cpc	r24, r27
    1a70:	bf e0       	ldi	r27, 0x0F	; 15
    1a72:	9b 07       	cpc	r25, r27
    1a74:	10 f1       	brcs	.+68     	; 0x1aba <writeFile+0x6de>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1a76:	6f 3f       	cpi	r22, 0xFF	; 255
    1a78:	ef ef       	ldi	r30, 0xFF	; 255
    1a7a:	7e 07       	cpc	r23, r30
    1a7c:	ef ef       	ldi	r30, 0xFF	; 255
    1a7e:	8e 07       	cpc	r24, r30
    1a80:	ef e0       	ldi	r30, 0x0F	; 15
    1a82:	9e 07       	cpc	r25, r30
    1a84:	b9 f4       	brne	.+46     	; 0x1ab4 <writeFile+0x6d8>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1a86:	c5 01       	movw	r24, r10
    1a88:	b4 01       	movw	r22, r8
    1a8a:	0e 94 34 03 	call	0x668	; 0x668 <searchNextFreeCluster>
    1a8e:	6b 01       	movw	r12, r22
    1a90:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1a92:	c5 01       	movw	r24, r10
    1a94:	b4 01       	movw	r22, r8
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	97 01       	movw	r18, r14
    1a9a:	86 01       	movw	r16, r12
    1a9c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0f ef       	ldi	r16, 0xFF	; 255
    1aa8:	1f ef       	ldi	r17, 0xFF	; 255
    1aaa:	2f ef       	ldi	r18, 0xFF	; 255
    1aac:	3f e0       	ldi	r19, 0x0F	; 15
    1aae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <getSetNextCluster>
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <writeFile+0x6de>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1ab4:	8b e8       	ldi	r24, 0x8B	; 139
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0a c0       	rjmp	.+20     	; 0x1ace <writeFile+0x6f2>
	    return;
    1aba:	46 01       	movw	r8, r12
    1abc:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1abe:	c1 14       	cp	r12, r1
    1ac0:	d1 04       	cpc	r13, r1
    1ac2:	e1 04       	cpc	r14, r1
    1ac4:	f1 04       	cpc	r15, r1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <writeFile+0x6ee>
    1ac8:	11 cf       	rjmp	.-478    	; 0x18ec <writeFile+0x510>
    1aca:	82 e7       	ldi	r24, 0x72	; 114
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    1ad2:	26 96       	adiw	r28, 0x06	; 6
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	df 90       	pop	r13
    1aec:	cf 90       	pop	r12
    1aee:	bf 90       	pop	r11
    1af0:	af 90       	pop	r10
    1af2:	9f 90       	pop	r9
    1af4:	8f 90       	pop	r8
    1af6:	7f 90       	pop	r7
    1af8:	6f 90       	pop	r6
    1afa:	5f 90       	pop	r5
    1afc:	4f 90       	pop	r4
    1afe:	3f 90       	pop	r3
    1b00:	2f 90       	pop	r2
    1b02:	08 95       	ret

00001b04 <port_init>:
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1b04:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1b06:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1b08:	8f ee       	ldi	r24, 0xEF	; 239
    1b0a:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1b0c:	8f eb       	ldi	r24, 0xBF	; 191
    1b0e:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1b10:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1b12:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1b14:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1b16:	8e ef       	ldi	r24, 0xFE	; 254
    1b18:	81 bb       	out	0x11, r24	; 17
}
    1b1a:	08 95       	ret

00001b1c <uart0_init>:
// actual: baud rate:19231 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    1b1c:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    1b1e:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    1b20:	86 e8       	ldi	r24, 0x86	; 134
    1b22:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    1b24:	89 e1       	ldi	r24, 0x19	; 25
    1b26:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    1b28:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    1b2a:	88 e1       	ldi	r24, 0x18	; 24
    1b2c:	8a b9       	out	0x0a, r24	; 10
}
    1b2e:	08 95       	ret

00001b30 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();
    1b30:	f8 94       	cli
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1b32:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1b34:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1b36:	8f ee       	ldi	r24, 0xEF	; 239
    1b38:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1b3a:	8f eb       	ldi	r24, 0xBF	; 191
    1b3c:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1b3e:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1b40:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1b42:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1b44:	8e ef       	ldi	r24, 0xFE	; 254
    1b46:	81 bb       	out	0x11, r24	; 17
//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();
 port_init();
 spi_init();
    1b48:	0e 94 ed 11 	call	0x23da	; 0x23da <spi_init>
// actual: baud rate:19231 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    1b4c:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    1b4e:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    1b50:	86 e8       	ldi	r24, 0x86	; 134
    1b52:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    1b54:	89 e1       	ldi	r24, 0x19	; 25
    1b56:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    1b58:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    1b5a:	88 e1       	ldi	r24, 0x18	; 24
    1b5c:	8a b9       	out	0x0a, r24	; 10
 cli();
 port_init();
 spi_init();
 uart0_init();

 MCUCR = 0x00;
    1b5e:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    1b60:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    1b62:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    1b64:	08 95       	ret

00001b66 <main>:

//*************************** MAIN *******************************//
int main(void)
{
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	88 ee       	ldi	r24, 0xE8	; 232
    1b8c:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8e:	28 ec       	ldi	r18, 0xC8	; 200
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	f9 01       	movw	r30, r18
    1b94:	31 97       	sbiw	r30, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	d9 f7       	brne	.-10     	; 0x1b92 <main+0x2c>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1b9c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    1ba0:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    1ba2:	8d e0       	ldi	r24, 0x0D	; 13
    1ba4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1ba8:	8a e0       	ldi	r24, 0x0A	; 10
    1baa:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
TX_NEWLINE;
    1bae:	8d e0       	ldi	r24, 0x0D	; 13
    1bb0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1bb4:	8a e0       	ldi	r24, 0x0A	; 10
    1bb6:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F (PSTR("***********************************"));
    1bba:	8e ed       	ldi	r24, 0xDE	; 222
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1bc2:	8d e0       	ldi	r24, 0x0D	; 13
    1bc4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1bc8:	8a e0       	ldi	r24, 0x0A	; 10
    1bca:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F (PSTR(" Dharmani's microSD Card Testing.."));
    1bce:	8b eb       	ldi	r24, 0xBB	; 187
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1bd6:	8d e0       	ldi	r24, 0x0D	; 13
    1bd8:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1bdc:	8a e0       	ldi	r24, 0x0A	; 10
    1bde:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F (PSTR("***********************************"));
    1be2:	87 e9       	ldi	r24, 0x97	; 151
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1bea:	8d e0       	ldi	r24, 0x0D	; 13
    1bec:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1bf0:	8a e0       	ldi	r24, 0x0A	; 10
    1bf2:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>

SD_init();
    1bf6:	0e 94 a2 11 	call	0x2344	; 0x2344 <SD_init>
SPI_HIGH_SPEED;	//SCK - 4 MHz
    1bfa:	80 e5       	ldi	r24, 0x50	; 80
    1bfc:	8d b9       	out	0x0d, r24	; 13
    1bfe:	70 9a       	sbi	0x0e, 0	; 14
    1c00:	80 ed       	ldi	r24, 0xD0	; 208
    1c02:	97 e0       	ldi	r25, 0x07	; 7
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <main+0x9e>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1c08:	0e 94 c0 05 	call	0xb80	; 0xb80 <getBootSectorData>
if(error) 	
    1c0c:	88 23       	and	r24, r24
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <main+0xb0>
    1c10:	ee 24       	eor	r14, r14
    1c12:	e3 94       	inc	r14
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <main+0xba>
{
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1c16:	86 e8       	ldi	r24, 0x86	; 134
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    1c1e:	ee 24       	eor	r14, r14

case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
    1c20:	6e 01       	movw	r12, r28
    1c22:	08 94       	sec
    1c24:	c1 1c       	adc	r12, r1
    1c26:	d1 1c       	adc	r13, r1
          for(i=0; i<13; i++)
    1c28:	ee e0       	ldi	r30, 0x0E	; 14
    1c2a:	ae 2e       	mov	r10, r30
    1c2c:	b1 2c       	mov	r11, r1
    1c2e:	ac 0e       	add	r10, r28
    1c30:	bd 1e       	adc	r11, r29
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1c32:	8d e0       	ldi	r24, 0x0D	; 13
    1c34:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c38:	8a e0       	ldi	r24, 0x0A	; 10
    1c3a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    1c3e:	85 e7       	ldi	r24, 0x75	; 117
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1c46:	8d e0       	ldi	r24, 0x0D	; 13
    1c48:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c4c:	8a e0       	ldi	r24, 0x0A	; 10
    1c4e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
option = receiveByte();
    1c52:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
TX_NEWLINE;
    1c56:	8d e0       	ldi	r24, 0x0D	; 13
    1c58:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c5c:	8a e0       	ldi	r24, 0x0A	; 10
    1c5e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 0 : Erase Blocks"));
    1c62:	82 e6       	ldi	r24, 0x62	; 98
    1c64:	93 e0       	ldi	r25, 0x03	; 3
    1c66:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1c6a:	8d e0       	ldi	r24, 0x0D	; 13
    1c6c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c70:	8a e0       	ldi	r24, 0x0A	; 10
    1c72:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 1 : Write single Block"));
    1c76:	89 e4       	ldi	r24, 0x49	; 73
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1c7e:	8d e0       	ldi	r24, 0x0D	; 13
    1c80:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c84:	8a e0       	ldi	r24, 0x0A	; 10
    1c86:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 2 : Read single Block"));
    1c8a:	81 e3       	ldi	r24, 0x31	; 49
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    1c92:	8d e0       	ldi	r24, 0x0D	; 13
    1c94:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1c98:	8a e0       	ldi	r24, 0x0A	; 10
    1c9a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 5 : Get file list"));
    1c9e:	8d e1       	ldi	r24, 0x1D	; 29
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1ca6:	8d e0       	ldi	r24, 0x0D	; 13
    1ca8:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1cac:	8a e0       	ldi	r24, 0x0A	; 10
    1cae:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 6 : Read File"));
    1cb2:	8d e0       	ldi	r24, 0x0D	; 13
    1cb4:	93 e0       	ldi	r25, 0x03	; 3
    1cb6:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1cba:	8d e0       	ldi	r24, 0x0D	; 13
    1cbc:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1cc0:	8a e0       	ldi	r24, 0x0A	; 10
    1cc2:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 7 : Write File"));
    1cc6:	8c ef       	ldi	r24, 0xFC	; 252
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1cce:	8d e0       	ldi	r24, 0x0D	; 13
    1cd0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1cd4:	8a e0       	ldi	r24, 0x0A	; 10
    1cd6:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 8 : Delete File"));
    1cda:	8a ee       	ldi	r24, 0xEA	; 234
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
TX_NEWLINE;
    1ce2:	8d e0       	ldi	r24, 0x0D	; 13
    1ce4:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1ce8:	8a e0       	ldi	r24, 0x0A	; 10
    1cea:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    1cee:	8f eb       	ldi	r24, 0xBF	; 191
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>

TX_NEWLINE;
    1cf6:	8d e0       	ldi	r24, 0x0D	; 13
    1cf8:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1cfc:	8a e0       	ldi	r24, 0x0A	; 10
    1cfe:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
TX_NEWLINE;
    1d02:	8d e0       	ldi	r24, 0x0D	; 13
    1d04:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1d08:	8a e0       	ldi	r24, 0x0A	; 10
    1d0a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9): "));
    1d0e:	87 ea       	ldi	r24, 0xA7	; 167
    1d10:	92 e0       	ldi	r25, 0x02	; 2
    1d12:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    1d16:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1d1a:	f8 2e       	mov	r15, r24
transmitByte(option);
    1d1c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1d20:	8f 2d       	mov	r24, r15
    1d22:	85 53       	subi	r24, 0x35	; 53
    1d24:	85 30       	cpi	r24, 0x05	; 5
    1d26:	98 f4       	brcc	.+38     	; 0x1d4e <main+0x1e8>
{
  if(!FAT32_active) 
    1d28:	ee 20       	and	r14, r14
    1d2a:	89 f4       	brne	.+34     	; 0x1d4e <main+0x1e8>
  {
    TX_NEWLINE;
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1d32:	8a e0       	ldi	r24, 0x0A	; 10
    1d34:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    TX_NEWLINE;
    1d38:	8d e0       	ldi	r24, 0x0D	; 13
    1d3a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1d3e:	8a e0       	ldi	r24, 0x0A	; 10
    1d40:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    1d44:	8f e8       	ldi	r24, 0x8F	; 143
    1d46:	92 e0       	ldi	r25, 0x02	; 2
    1d48:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    1d4c:	72 cf       	rjmp	.-284    	; 0x1c32 <main+0xcc>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1d4e:	8f 2d       	mov	r24, r15
    1d50:	80 53       	subi	r24, 0x30	; 48
    1d52:	85 30       	cpi	r24, 0x05	; 5
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <main+0x1f2>
    1d56:	a2 c0       	rjmp	.+324    	; 0x1e9c <main+0x336>
{
TX_NEWLINE;
    1d58:	8d e0       	ldi	r24, 0x0D	; 13
    1d5a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
    1d60:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
TX_NEWLINE;
    1d64:	8d e0       	ldi	r24, 0x0D	; 13
    1d66:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1d6a:	8a e0       	ldi	r24, 0x0A	; 10
    1d6c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1d70:	8b e6       	ldi	r24, 0x6B	; 107
    1d72:	92 e0       	ldi	r25, 0x02	; 2
    1d74:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
data = receiveByte(); transmitByte(data);
    1d78:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1d7c:	08 2f       	mov	r16, r24
    1d7e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    1d82:	10 e0       	ldi	r17, 0x00	; 0
    1d84:	0f 70       	andi	r16, 0x0F	; 15
    1d86:	10 70       	andi	r17, 0x00	; 0
    1d88:	88 ee       	ldi	r24, 0xE8	; 232
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	02 9f       	mul	r16, r18
    1d90:	c0 01       	movw	r24, r0
    1d92:	03 9f       	mul	r16, r19
    1d94:	90 0d       	add	r25, r0
    1d96:	12 9f       	mul	r17, r18
    1d98:	90 0d       	add	r25, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	aa 27       	eor	r26, r26
    1d9e:	97 fd       	sbrc	r25, 7
    1da0:	a0 95       	com	r26
    1da2:	ba 2f       	mov	r27, r26
    1da4:	80 93 94 00 	sts	0x0094, r24
    1da8:	90 93 95 00 	sts	0x0095, r25
    1dac:	a0 93 96 00 	sts	0x0096, r26
    1db0:	b0 93 97 00 	sts	0x0097, r27
data = receiveByte(); transmitByte(data);
    1db4:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1db8:	08 2f       	mov	r16, r24
    1dba:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
startBlock += (data & 0x0f) * 100;
    1dbe:	20 91 94 00 	lds	r18, 0x0094
    1dc2:	30 91 95 00 	lds	r19, 0x0095
    1dc6:	40 91 96 00 	lds	r20, 0x0096
    1dca:	50 91 97 00 	lds	r21, 0x0097
    1dce:	10 e0       	ldi	r17, 0x00	; 0
    1dd0:	0f 70       	andi	r16, 0x0F	; 15
    1dd2:	10 70       	andi	r17, 0x00	; 0
    1dd4:	84 e6       	ldi	r24, 0x64	; 100
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	bc 01       	movw	r22, r24
    1dda:	06 9f       	mul	r16, r22
    1ddc:	c0 01       	movw	r24, r0
    1dde:	07 9f       	mul	r16, r23
    1de0:	90 0d       	add	r25, r0
    1de2:	16 9f       	mul	r17, r22
    1de4:	90 0d       	add	r25, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	aa 27       	eor	r26, r26
    1dea:	97 fd       	sbrc	r25, 7
    1dec:	a0 95       	com	r26
    1dee:	ba 2f       	mov	r27, r26
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	a4 1f       	adc	r26, r20
    1df6:	b5 1f       	adc	r27, r21
    1df8:	80 93 94 00 	sts	0x0094, r24
    1dfc:	90 93 95 00 	sts	0x0095, r25
    1e00:	a0 93 96 00 	sts	0x0096, r26
    1e04:	b0 93 97 00 	sts	0x0097, r27
data = receiveByte(); transmitByte(data);
    1e08:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1e0c:	08 2f       	mov	r16, r24
    1e0e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
startBlock += (data & 0x0f) * 10;
    1e12:	20 91 94 00 	lds	r18, 0x0094
    1e16:	30 91 95 00 	lds	r19, 0x0095
    1e1a:	40 91 96 00 	lds	r20, 0x0096
    1e1e:	50 91 97 00 	lds	r21, 0x0097
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	0f 70       	andi	r16, 0x0F	; 15
    1e26:	10 70       	andi	r17, 0x00	; 0
    1e28:	c8 01       	movw	r24, r16
    1e2a:	73 e0       	ldi	r23, 0x03	; 3
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	7a 95       	dec	r23
    1e32:	e1 f7       	brne	.-8      	; 0x1e2c <main+0x2c6>
    1e34:	00 0f       	add	r16, r16
    1e36:	11 1f       	adc	r17, r17
    1e38:	80 0f       	add	r24, r16
    1e3a:	91 1f       	adc	r25, r17
    1e3c:	aa 27       	eor	r26, r26
    1e3e:	97 fd       	sbrc	r25, 7
    1e40:	a0 95       	com	r26
    1e42:	ba 2f       	mov	r27, r26
    1e44:	82 0f       	add	r24, r18
    1e46:	93 1f       	adc	r25, r19
    1e48:	a4 1f       	adc	r26, r20
    1e4a:	b5 1f       	adc	r27, r21
    1e4c:	80 93 94 00 	sts	0x0094, r24
    1e50:	90 93 95 00 	sts	0x0095, r25
    1e54:	a0 93 96 00 	sts	0x0096, r26
    1e58:	b0 93 97 00 	sts	0x0097, r27
data = receiveByte(); transmitByte(data);
    1e5c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1e60:	18 2f       	mov	r17, r24
    1e62:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
startBlock += (data & 0x0f);
    1e66:	80 91 94 00 	lds	r24, 0x0094
    1e6a:	90 91 95 00 	lds	r25, 0x0095
    1e6e:	a0 91 96 00 	lds	r26, 0x0096
    1e72:	b0 91 97 00 	lds	r27, 0x0097
    1e76:	1f 70       	andi	r17, 0x0F	; 15
    1e78:	81 0f       	add	r24, r17
    1e7a:	91 1d       	adc	r25, r1
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	b1 1d       	adc	r27, r1
    1e80:	80 93 94 00 	sts	0x0094, r24
    1e84:	90 93 95 00 	sts	0x0095, r25
    1e88:	a0 93 96 00 	sts	0x0096, r26
    1e8c:	b0 93 97 00 	sts	0x0097, r27
TX_NEWLINE;
    1e90:	8d e0       	ldi	r24, 0x0D	; 13
    1e92:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1e96:	8a e0       	ldi	r24, 0x0A	; 10
    1e98:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
}

totalBlocks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e0       	ldi	r26, 0x00	; 0
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	80 93 9e 02 	sts	0x029E, r24
    1ea8:	90 93 9f 02 	sts	0x029F, r25
    1eac:	a0 93 a0 02 	sts	0x02A0, r26
    1eb0:	b0 93 a1 02 	sts	0x02A1, r27
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    1eb4:	75 e3       	ldi	r23, 0x35	; 53
    1eb6:	f7 16       	cp	r15, r23
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <main+0x356>
    1eba:	ba c0       	rjmp	.+372    	; 0x2030 <main+0x4ca>
    1ebc:	7f 15       	cp	r23, r15
    1ebe:	60 f0       	brcs	.+24     	; 0x1ed8 <main+0x372>
    1ec0:	81 e3       	ldi	r24, 0x31	; 49
    1ec2:	f8 16       	cp	r15, r24
    1ec4:	99 f1       	breq	.+102    	; 0x1f2c <main+0x3c6>
    1ec6:	22 e3       	ldi	r18, 0x32	; 50
    1ec8:	f2 16       	cp	r15, r18
    1eca:	09 f4       	brne	.+2      	; 0x1ece <main+0x368>
    1ecc:	7b c0       	rjmp	.+246    	; 0x1fc4 <main+0x45e>
    1ece:	30 e3       	ldi	r19, 0x30	; 48
    1ed0:	f3 16       	cp	r15, r19
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <main+0x370>
    1ed4:	19 c1       	rjmp	.+562    	; 0x2108 <main+0x5a2>
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <main+0x384>
    1ed8:	68 e3       	ldi	r22, 0x38	; 56
    1eda:	6f 15       	cp	r22, r15
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <main+0x37a>
    1ede:	b4 c0       	rjmp	.+360    	; 0x2048 <main+0x4e2>
    1ee0:	79 e3       	ldi	r23, 0x39	; 57
    1ee2:	f7 16       	cp	r15, r23
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <main+0x382>
    1ee6:	10 c1       	rjmp	.+544    	; 0x2108 <main+0x5a2>
    1ee8:	0c c1       	rjmp	.+536    	; 0x2102 <main+0x59c>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    1eea:	60 91 94 00 	lds	r22, 0x0094
    1eee:	70 91 95 00 	lds	r23, 0x0095
    1ef2:	80 91 96 00 	lds	r24, 0x0096
    1ef6:	90 91 97 00 	lds	r25, 0x0097
    1efa:	20 91 9e 02 	lds	r18, 0x029E
    1efe:	30 91 9f 02 	lds	r19, 0x029F
    1f02:	40 91 a0 02 	lds	r20, 0x02A0
    1f06:	50 91 a1 02 	lds	r21, 0x02A1
    1f0a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <SD_erase>
    1f0e:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    1f10:	8d e0       	ldi	r24, 0x0D	; 13
    1f12:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1f16:	8a e0       	ldi	r24, 0x0A	; 10
    1f18:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
          if(error)
    1f1c:	11 23       	and	r17, r17
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <main+0x3c0>
              transmitString_F(PSTR("Erase failed.."));
    1f20:	8c e5       	ldi	r24, 0x5C	; 92
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	49 c0       	rjmp	.+146    	; 0x1fb8 <main+0x452>
          else
              transmitString_F(PSTR("Erased!"));
    1f26:	84 e5       	ldi	r24, 0x54	; 84
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	46 c0       	rjmp	.+140    	; 0x1fb8 <main+0x452>
          break;

case '1': TX_NEWLINE;
    1f2c:	8d e0       	ldi	r24, 0x0D	; 13
    1f2e:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    1f38:	8a e3       	ldi	r24, 0x3A	; 58
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    1f40:	00 e0       	ldi	r16, 0x00	; 0
    1f42:	10 e0       	ldi	r17, 0x00	; 0
          i=0;
            do
            {
                data = receiveByte();
    1f44:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    1f48:	f8 2e       	mov	r15, r24
                transmitByte(data);
    1f4a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
                buffer[i++] = data;
    1f4e:	f8 01       	movw	r30, r16
    1f50:	e8 56       	subi	r30, 0x68	; 104
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	f0 82       	st	Z, r15
    1f56:	0f 5f       	subi	r16, 0xFF	; 255
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
                if(data == 0x0d)
    1f5a:	8d e0       	ldi	r24, 0x0D	; 13
    1f5c:	f8 16       	cp	r15, r24
    1f5e:	51 f4       	brne	.+20     	; 0x1f74 <main+0x40e>
                {
                    transmitByte(0x0a);
    1f60:	8a e0       	ldi	r24, 0x0A	; 10
    1f62:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
                    buffer[i++] = 0x0a;
    1f66:	f8 01       	movw	r30, r16
    1f68:	e8 56       	subi	r30, 0x68	; 104
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	8a e0       	ldi	r24, 0x0A	; 10
    1f6e:	80 83       	st	Z, r24
    1f70:	0f 5f       	subi	r16, 0xFF	; 255
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
                }
                if(i == 512) break;
    1f74:	22 e0       	ldi	r18, 0x02	; 2
    1f76:	00 30       	cpi	r16, 0x00	; 0
    1f78:	12 07       	cpc	r17, r18
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <main+0x41c>
            }while (data != '~');
    1f7c:	3e e7       	ldi	r19, 0x7E	; 126
    1f7e:	f3 16       	cp	r15, r19
    1f80:	09 f7       	brne	.-62     	; 0x1f44 <main+0x3de>

            error = SD_writeSingleBlock (startBlock);
    1f82:	60 91 94 00 	lds	r22, 0x0094
    1f86:	70 91 95 00 	lds	r23, 0x0095
    1f8a:	80 91 96 00 	lds	r24, 0x0096
    1f8e:	90 91 97 00 	lds	r25, 0x0097
    1f92:	0e 94 15 11 	call	0x222a	; 0x222a <SD_writeSingleBlock>
    1f96:	18 2f       	mov	r17, r24
            TX_NEWLINE;
    1f98:	8d e0       	ldi	r24, 0x0D	; 13
    1f9a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1f9e:	8a e0       	ldi	r24, 0x0A	; 10
    1fa0:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            TX_NEWLINE;
    1fa4:	8d e0       	ldi	r24, 0x0D	; 13
    1fa6:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1faa:	8a e0       	ldi	r24, 0x0A	; 10
    1fac:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            if(error)
    1fb0:	11 23       	and	r17, r17
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <main+0x458>
                transmitString_F(PSTR("Write failed.."));
    1fb4:	8b e2       	ldi	r24, 0x2B	; 43
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    1fbc:	bb c0       	rjmp	.+374    	; 0x2134 <main+0x5ce>
            else
                transmitString_F(PSTR("Write successful!"));
    1fbe:	89 e1       	ldi	r24, 0x19	; 25
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	fa cf       	rjmp	.-12     	; 0x1fb8 <main+0x452>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    1fc4:	60 91 94 00 	lds	r22, 0x0094
    1fc8:	70 91 95 00 	lds	r23, 0x0095
    1fcc:	80 91 96 00 	lds	r24, 0x0096
    1fd0:	90 91 97 00 	lds	r25, 0x0097
    1fd4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <SD_readSingleBlock>
    1fd8:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    1fda:	8d e0       	ldi	r24, 0x0D	; 13
    1fdc:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    1fe0:	8a e0       	ldi	r24, 0x0A	; 10
    1fe2:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
          if(error)
    1fe6:	11 23       	and	r17, r17
    1fe8:	19 f0       	breq	.+6      	; 0x1ff0 <main+0x48a>
            transmitString_F(PSTR("Read failed.."));
    1fea:	8b e0       	ldi	r24, 0x0B	; 11
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	e4 cf       	rjmp	.-56     	; 0x1fb8 <main+0x452>
    1ff0:	00 e0       	ldi	r16, 0x00	; 0
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	e8 56       	subi	r30, 0x68	; 104
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8e 37       	cpi	r24, 0x7E	; 126
    1ffe:	49 f0       	breq	.+18     	; 0x2012 <main+0x4ac>
                transmitByte(buffer[i]);
    2000:	80 81       	ld	r24, Z
    2002:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    2006:	0f 5f       	subi	r16, 0xFF	; 255
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	62 e0       	ldi	r22, 0x02	; 2
    200c:	00 30       	cpi	r16, 0x00	; 0
    200e:	16 07       	cpc	r17, r22
    2010:	89 f7       	brne	.-30     	; 0x1ff4 <main+0x48e>
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    2012:	8d e0       	ldi	r24, 0x0D	; 13
    2014:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    2018:	8a e0       	ldi	r24, 0x0A	; 10
    201a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            TX_NEWLINE;
    201e:	8d e0       	ldi	r24, 0x0D	; 13
    2020:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    2024:	8a e0       	ldi	r24, 0x0A	; 10
    2026:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    202a:	8a ef       	ldi	r24, 0xFA	; 250
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	c4 cf       	rjmp	.-120    	; 0x1fb8 <main+0x452>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    2030:	8d e0       	ldi	r24, 0x0D	; 13
    2032:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    2036:	8a e0       	ldi	r24, 0x0A	; 10
    2038:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
  		  findFiles(GET_LIST,0);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 23 07 	call	0xe46	; 0xe46 <findFiles>
    2046:	76 c0       	rjmp	.+236    	; 0x2134 <main+0x5ce>
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    2048:	8d e0       	ldi	r24, 0x0D	; 13
    204a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    204e:	8a e0       	ldi	r24, 0x0A	; 10
    2050:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
		  TX_NEWLINE;
    2054:	8d e0       	ldi	r24, 0x0D	; 13
    2056:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    205a:	8a e0       	ldi	r24, 0x0A	; 10
    205c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    2060:	88 ee       	ldi	r24, 0xE8	; 232
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    2068:	f6 01       	movw	r30, r12
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    206a:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    206c:	ea 15       	cp	r30, r10
    206e:	fb 05       	cpc	r31, r11
    2070:	e1 f7       	brne	.-8      	; 0x206a <main+0x504>
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	10 e0       	ldi	r17, 0x00	; 0
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2076:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <receiveByte>
    207a:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    207c:	8d 30       	cpi	r24, 0x0D	; 13
    207e:	29 f1       	breq	.+74     	; 0x20ca <main+0x564>
			if(data == 0x08)	//'Back Space' key pressed
    2080:	88 30       	cpi	r24, 0x08	; 8
    2082:	79 f4       	brne	.+30     	; 0x20a2 <main+0x53c>
	 		{ 
	   			if(i != 0)
    2084:	01 15       	cp	r16, r1
    2086:	11 05       	cpc	r17, r1
    2088:	b1 f3       	breq	.-20     	; 0x2076 <main+0x510>
	   			{ 
	     			transmitByte(data);
    208a:	88 e0       	ldi	r24, 0x08	; 8
    208c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
					transmitByte(' '); 
    2090:	80 e2       	ldi	r24, 0x20	; 32
    2092:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
	     			transmitByte(data); 
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
	     			i--; 
    209c:	01 50       	subi	r16, 0x01	; 1
    209e:	10 40       	sbci	r17, 0x00	; 0
    20a0:	ea cf       	rjmp	.-44     	; 0x2076 <main+0x510>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    20a2:	80 52       	subi	r24, 0x20	; 32
    20a4:	8f 35       	cpi	r24, 0x5F	; 95
    20a6:	38 f7       	brcc	.-50     	; 0x2076 <main+0x510>
			transmitByte(data);
    20a8:	89 2f       	mov	r24, r25
    20aa:	9e 87       	std	Y+14, r25	; 0x0e
    20ac:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
            fileName[i++] = data;
    20b0:	f6 01       	movw	r30, r12
    20b2:	e0 0f       	add	r30, r16
    20b4:	f1 1f       	adc	r31, r17
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	90 83       	st	Z, r25
    20ba:	0f 5f       	subi	r16, 0xFF	; 255
    20bc:	1f 4f       	sbci	r17, 0xFF	; 255
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    20be:	0d 30       	cpi	r16, 0x0D	; 13
    20c0:	11 05       	cpc	r17, r1
    20c2:	c9 f6       	brne	.-78     	; 0x2076 <main+0x510>
    20c4:	82 ed       	ldi	r24, 0xD2	; 210
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	77 cf       	rjmp	.-274    	; 0x1fb8 <main+0x452>
          }
          if(i>12) break;
    20ca:	0d 30       	cpi	r16, 0x0D	; 13
    20cc:	11 05       	cpc	r17, r1
    20ce:	90 f5       	brcc	.+100    	; 0x2134 <main+0x5ce>
       
	      TX_NEWLINE;
    20d0:	8d e0       	ldi	r24, 0x0D	; 13
    20d2:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    20d6:	8a e0       	ldi	r24, 0x0A	; 10
    20d8:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
		  if(option == '6')
    20dc:	76 e3       	ldi	r23, 0x36	; 54
    20de:	f7 16       	cp	r15, r23
    20e0:	29 f4       	brne	.+10     	; 0x20ec <main+0x586>
		     readFile( READ, fileName);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	b6 01       	movw	r22, r12
    20e6:	0e 94 1d 09 	call	0x123a	; 0x123a <readFile>
    20ea:	24 c0       	rjmp	.+72     	; 0x2134 <main+0x5ce>
		  if(option == '7')
    20ec:	87 e3       	ldi	r24, 0x37	; 55
    20ee:	f8 16       	cp	r15, r24
    20f0:	21 f4       	brne	.+8      	; 0x20fa <main+0x594>
		  	 writeFile(fileName);
    20f2:	c6 01       	movw	r24, r12
    20f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <writeFile>
    20f8:	1d c0       	rjmp	.+58     	; 0x2134 <main+0x5ce>
 		  if(option == '8')
		     deleteFile(fileName);
    20fa:	c6 01       	movw	r24, r12
    20fc:	0e 94 0f 09 	call	0x121e	; 0x121e <deleteFile>
    2100:	19 c0       	rjmp	.+50     	; 0x2134 <main+0x5ce>
          break;

case '9': memoryStatistics();
    2102:	0e 94 a6 04 	call	0x94c	; 0x94c <memoryStatistics>
    2106:	16 c0       	rjmp	.+44     	; 0x2134 <main+0x5ce>
          break;

default: TX_NEWLINE;
    2108:	8d e0       	ldi	r24, 0x0D	; 13
    210a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    210e:	8a e0       	ldi	r24, 0x0A	; 10
    2110:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
         TX_NEWLINE;
    2114:	8d e0       	ldi	r24, 0x0D	; 13
    2116:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    211a:	8a e0       	ldi	r24, 0x0A	; 10
    211c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    2120:	81 ec       	ldi	r24, 0xC1	; 193
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
         TX_NEWLINE;
    2128:	8d e0       	ldi	r24, 0x0D	; 13
    212a:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    212e:	8a e0       	ldi	r24, 0x0A	; 10
    2130:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
}

TX_NEWLINE;
    2134:	8d e0       	ldi	r24, 0x0D	; 13
    2136:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    213a:	8a e0       	ldi	r24, 0x0A	; 10
    213c:	0e 94 01 12 	call	0x2402	; 0x2402 <transmitByte>
    2140:	78 cd       	rjmp	.-1296   	; 0x1c32 <main+0xcc>

00002142 <SD_sendCommand>:
//Arguments: unsigned char (8-bit command value)
// & unsigned long (32-bit command argument)
//return: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	7a 01       	movw	r14, r20
    214c:	8b 01       	movw	r16, r22
unsigned char response, retry=0;

SD_CS_ASSERT;
    214e:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    2150:	80 64       	ori	r24, 0x40	; 64
    2152:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(arg>>24);
    2156:	81 2f       	mov	r24, r17
    2158:	99 27       	eor	r25, r25
    215a:	aa 27       	eor	r26, r26
    215c:	bb 27       	eor	r27, r27
    215e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(arg>>16);
    2162:	c8 01       	movw	r24, r16
    2164:	aa 27       	eor	r26, r26
    2166:	bb 27       	eor	r27, r27
    2168:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(arg>>8);
    216c:	bb 27       	eor	r27, r27
    216e:	a1 2f       	mov	r26, r17
    2170:	90 2f       	mov	r25, r16
    2172:	8f 2d       	mov	r24, r15
    2174:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(arg);
    2178:	8e 2d       	mov	r24, r14
    217a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(0x95);
    217e:	85 e9       	ldi	r24, 0x95	; 149
    2180:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <SD_sendCommand+0x4a>

while((response = SPI_receive()) == 0xff) //wait response
    2188:	11 50       	subi	r17, 0x01	; 1
   if(retry++ > 0xfe) break; //time out error
    218a:	29 f0       	breq	.+10     	; 0x2196 <SD_sendCommand+0x54>
SPI_transmit(arg>>16);
SPI_transmit(arg>>8);
SPI_transmit(arg);
SPI_transmit(0x95);

while((response = SPI_receive()) == 0xff) //wait response
    218c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    2190:	08 2f       	mov	r16, r24
    2192:	8f 3f       	cpi	r24, 0xFF	; 255
    2194:	c9 f3       	breq	.-14     	; 0x2188 <SD_sendCommand+0x46>
   if(retry++ > 0xfe) break; //time out error

SPI_receive(); //extra 8 CLK
    2196:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
SD_CS_DEASSERT;
    219a:	c1 9a       	sbi	0x18, 1	; 24

return response; //return state
}
    219c:	80 2f       	mov	r24, r16
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	08 95       	ret

000021a8 <SD_erase>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	7b 01       	movw	r14, r22
    21ba:	8c 01       	movw	r16, r24
    21bc:	59 01       	movw	r10, r18
    21be:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock<<9); //send starting block address
    21c0:	ab 01       	movw	r20, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	e9 e0       	ldi	r30, 0x09	; 9
    21c6:	44 0f       	add	r20, r20
    21c8:	55 1f       	adc	r21, r21
    21ca:	66 1f       	adc	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	ea 95       	dec	r30
    21d0:	d1 f7       	brne	.-12     	; 0x21c6 <SD_erase+0x1e>
    21d2:	80 e2       	ldi	r24, 0x20	; 32
    21d4:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    21d8:	88 23       	and	r24, r24
    21da:	f1 f4       	brne	.+60     	; 0x2218 <SD_erase+0x70>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)<<9); //send end block address
    21dc:	08 94       	sec
    21de:	e1 08       	sbc	r14, r1
    21e0:	f1 08       	sbc	r15, r1
    21e2:	01 09       	sbc	r16, r1
    21e4:	11 09       	sbc	r17, r1
    21e6:	ea 0c       	add	r14, r10
    21e8:	fb 1c       	adc	r15, r11
    21ea:	0c 1d       	adc	r16, r12
    21ec:	1d 1d       	adc	r17, r13
    21ee:	39 e0       	ldi	r19, 0x09	; 9
    21f0:	ee 0c       	add	r14, r14
    21f2:	ff 1c       	adc	r15, r15
    21f4:	00 1f       	adc	r16, r16
    21f6:	11 1f       	adc	r17, r17
    21f8:	3a 95       	dec	r19
    21fa:	d1 f7       	brne	.-12     	; 0x21f0 <SD_erase+0x48>
    21fc:	81 e2       	ldi	r24, 0x21	; 33
    21fe:	b8 01       	movw	r22, r16
    2200:	a7 01       	movw	r20, r14
    2202:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
if(response != 0x00)
    2206:	88 23       	and	r24, r24
    2208:	39 f4       	brne	.+14     	; 0x2218 <SD_erase+0x70>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    220a:	86 e2       	ldi	r24, 0x26	; 38
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	bf 90       	pop	r11
    2226:	af 90       	pop	r10
    2228:	08 95       	ret

0000222a <SD_writeSingleBlock>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ab 01       	movw	r20, r22
    2230:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock<<9); //write a Block command
    2232:	f9 e0       	ldi	r31, 0x09	; 9
    2234:	44 0f       	add	r20, r20
    2236:	55 1f       	adc	r21, r21
    2238:	66 1f       	adc	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	fa 95       	dec	r31
    223e:	d1 f7       	brne	.-12     	; 0x2234 <SD_writeSingleBlock+0xa>
    2240:	88 e1       	ldi	r24, 0x18	; 24
    2242:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2246:	88 23       	and	r24, r24
    2248:	11 f0       	breq	.+4      	; 0x224e <SD_writeSingleBlock+0x24>
    224a:	98 2f       	mov	r25, r24
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <SD_writeSingleBlock+0xa2>
return response;

SD_CS_ASSERT;
    224e:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2250:	8e ef       	ldi	r24, 0xFE	; 254
    2252:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
    2256:	c0 e0       	ldi	r28, 0x00	; 0
    2258:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
    225a:	fe 01       	movw	r30, r28
    225c:	e8 56       	subi	r30, 0x68	; 104
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2266:	21 96       	adiw	r28, 0x01	; 1
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	c0 30       	cpi	r28, 0x00	; 0
    226c:	d8 07       	cpc	r29, r24
    226e:	a9 f7       	brne	.-22     	; 0x225a <SD_writeSingleBlock+0x30>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit(0xff);
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>

response = SPI_receive();
    227c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    2280:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2282:	8f 71       	andi	r24, 0x1F	; 31
    2284:	85 30       	cpi	r24, 0x05	; 5
    2286:	41 f0       	breq	.+16     	; 0x2298 <SD_writeSingleBlock+0x6e>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2288:	c1 9a       	sbi	0x18, 1	; 24
    228a:	20 c0       	rjmp	.+64     	; 0x22cc <SD_writeSingleBlock+0xa2>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	cf 3f       	cpi	r28, 0xFF	; 255
    2290:	d8 07       	cpc	r29, r24
    2292:	91 f0       	breq	.+36     	; 0x22b8 <SD_writeSingleBlock+0x8e>
    2294:	21 96       	adiw	r28, 0x01	; 1
    2296:	02 c0       	rjmp	.+4      	; 0x229c <SD_writeSingleBlock+0x72>
    2298:	c0 e0       	ldi	r28, 0x00	; 0
    229a:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    229c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    22a0:	88 23       	and	r24, r24
    22a2:	a1 f3       	breq	.-24     	; 0x228c <SD_writeSingleBlock+0x62>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    22a4:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    22a6:	8f ef       	ldi	r24, 0xFF	; 255
    22a8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    22ac:	c1 98       	cbi	0x18, 1	; 24
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <SD_writeSingleBlock+0x96>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    22b0:	8f ef       	ldi	r24, 0xFF	; 255
    22b2:	cf 3f       	cpi	r28, 0xFF	; 255
    22b4:	d8 07       	cpc	r29, r24
    22b6:	19 f4       	brne	.+6      	; 0x22be <SD_writeSingleBlock+0x94>
    22b8:	c1 9a       	sbi	0x18, 1	; 24
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	07 c0       	rjmp	.+14     	; 0x22cc <SD_writeSingleBlock+0xa2>
    22be:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    22c0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    22c4:	88 23       	and	r24, r24
    22c6:	a1 f3       	breq	.-24     	; 0x22b0 <SD_writeSingleBlock+0x86>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    22c8:	c1 9a       	sbi	0x18, 1	; 24
    22ca:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    22cc:	89 2f       	mov	r24, r25
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <SD_readSingleBlock>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ab 01       	movw	r20, r22
    22dc:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock<<9); //read a Block command
    22de:	a9 e0       	ldi	r26, 0x09	; 9
    22e0:	44 0f       	add	r20, r20
    22e2:	55 1f       	adc	r21, r21
    22e4:	66 1f       	adc	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	aa 95       	dec	r26
    22ea:	d1 f7       	brne	.-12     	; 0x22e0 <SD_readSingleBlock+0xc>
    22ec:	81 e1       	ldi	r24, 0x11	; 17
    22ee:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
    22f2:	18 2f       	mov	r17, r24
//block address converted to starting address of 512 byte Block
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    22f4:	88 23       	and	r24, r24
    22f6:	09 f5       	brne	.+66     	; 0x233a <SD_readSingleBlock+0x66>
  return response;

SD_CS_ASSERT;
    22f8:	c1 98       	cbi	0x18, 1	; 24
    22fa:	c0 e0       	ldi	r28, 0x00	; 0
    22fc:	d0 e0       	ldi	r29, 0x00	; 0
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <SD_readSingleBlock+0x36>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2300:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2302:	19 f4       	brne	.+6      	; 0x230a <SD_readSingleBlock+0x36>
    2304:	c1 9a       	sbi	0x18, 1	; 24
    2306:	11 e0       	ldi	r17, 0x01	; 1
    2308:	18 c0       	rjmp	.+48     	; 0x233a <SD_readSingleBlock+0x66>
  return response;

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    230a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    230e:	8e 3f       	cpi	r24, 0xFE	; 254
    2310:	b9 f7       	brne	.-18     	; 0x2300 <SD_readSingleBlock+0x2c>
    2312:	c0 e0       	ldi	r28, 0x00	; 0
    2314:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    2316:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
    231a:	fe 01       	movw	r30, r28
    231c:	e8 56       	subi	r30, 0x68	; 104
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2322:	21 96       	adiw	r28, 0x01	; 1
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	c0 30       	cpi	r28, 0x00	; 0
    2328:	d8 07       	cpc	r29, r24
    232a:	a9 f7       	brne	.-22     	; 0x2316 <SD_readSingleBlock+0x42>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    232c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
SPI_receive();
    2330:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2334:	0e 94 f6 11 	call	0x23ec	; 0x23ec <SPI_receive>
SD_CS_DEASSERT;
    2338:	c1 9a       	sbi	0x18, 1	; 24

return 0;
}
    233a:	81 2f       	mov	r24, r17
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	08 95       	ret

00002344 <SD_init>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
unsigned char i, response, retry=0 ;

SD_CS_ASSERT;
    2348:	c1 98       	cbi	0x18, 1	; 24
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	10 e0       	ldi	r17, 0x00	; 0
do
{
   for(i=0;i<10;i++)
      SPI_transmit(0xff);
    234e:	8f ef       	ldi	r24, 0xFF	; 255
    2350:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
unsigned char i, response, retry=0 ;

SD_CS_ASSERT;
do
{
   for(i=0;i<10;i++)
    2354:	1f 5f       	subi	r17, 0xFF	; 255
    2356:	1a 30       	cpi	r17, 0x0A	; 10
    2358:	d1 f7       	brne	.-12     	; 0x234e <SD_init+0xa>
      SPI_transmit(0xff);
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
   retry++;
    2368:	0f 5f       	subi	r16, 0xFF	; 255
   if(retry>0xfe) 
    236a:	0f 3f       	cpi	r16, 0xFF	; 255
    236c:	29 f4       	brne	.+10     	; 0x2378 <SD_init+0x34>
   {
      transmitString_F(PSTR("SD init fail.."));
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	94 e0       	ldi	r25, 0x04	; 4
    2372:	0e 94 4f 12 	call	0x249e	; 0x249e <transmitString_F>
    2376:	1b c0       	rjmp	.+54     	; 0x23ae <SD_init+0x6a>
	  return 1;
   } //time out
   
} while(response != 0x01);
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	41 f7       	brne	.-48     	; 0x234c <SD_init+0x8>

SD_CS_DEASSERT;
    237c:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit (0xff);
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
SPI_transmit (0xff);
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <SPI_transmit>
    238a:	10 e0       	ldi	r17, 0x00	; 0

retry = 0;

do
{
    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
	response = SD_sendCommand(SEND_OP_COND, 0); //same command sent again for compatibility with some cards
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
    retry++;
    23a8:	1f 5f       	subi	r17, 0xFF	; 255
    if(retry>0xfe) return 1; //time out
    23aa:	1f 3f       	cpi	r17, 0xFF	; 255
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <SD_init+0x6e>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	11 c0       	rjmp	.+34     	; 0x23d4 <SD_init+0x90>
}while(response);
    23b2:	88 23       	and	r24, r24
    23b4:	59 f7       	brne	.-42     	; 0x238c <SD_init+0x48>

SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
    23b6:	8b e3       	ldi	r24, 0x3B	; 59
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512
    23c4:	80 e1       	ldi	r24, 0x10	; 16
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	52 e0       	ldi	r21, 0x02	; 2
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	0e 94 a1 10 	call	0x2142	; 0x2142 <SD_sendCommand>
    23d2:	80 e0       	ldi	r24, 0x00	; 0

return 0; //normal return
}
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	08 95       	ret

000023da <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    23da:	82 e5       	ldi	r24, 0x52	; 82
    23dc:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    23de:	1e b8       	out	0x0e, r1	; 14
}
    23e0:	08 95       	ret

000023e2 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    23e2:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    23e4:	77 9b       	sbis	0x0e, 7	; 14
    23e6:	fe cf       	rjmp	.-4      	; 0x23e4 <SPI_transmit+0x2>
data = SPDR;
    23e8:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    23ea:	08 95       	ret

000023ec <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
    23ee:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    23f0:	77 9b       	sbis	0x0e, 7	; 14
    23f2:	fe cf       	rjmp	.-4      	; 0x23f0 <SPI_receive+0x4>
data = SPDR;
    23f4:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    23f6:	08 95       	ret

000023f8 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    23f8:	5f 9b       	sbis	0x0b, 7	; 11
    23fa:	fe cf       	rjmp	.-4      	; 0x23f8 <receiveByte>
	
	status = UCSRA;
    23fc:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    23fe:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    2400:	08 95       	ret

00002402 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2402:	5d 9b       	sbis	0x0b, 5	; 11
    2404:	fe cf       	rjmp	.-4      	; 0x2402 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2406:	8c b9       	out	0x0c, r24	; 12
}
    2408:	08 95       	ret

0000240a <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	2b 97       	sbiw	r28, 0x0b	; 11
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	11 f4       	brne	.+4      	; 0x2426 <transmitHex+0x1c>
    2422:	94 e0       	ldi	r25, 0x04	; 4
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <transmitHex+0x26>
if (dataType == LONG) count = 8;
    2426:	82 30       	cpi	r24, 0x02	; 2
    2428:	11 f4       	brne	.+4      	; 0x242e <transmitHex+0x24>
    242a:	98 e0       	ldi	r25, 0x08	; 8
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <transmitHex+0x26>
    242e:	92 e0       	ldi	r25, 0x02	; 2
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    2430:	de 01       	movw	r26, r28
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	e3 e7       	ldi	r30, 0x73	; 115
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	8b e0       	ldi	r24, 0x0B	; 11
    243a:	01 90       	ld	r0, Z+
    243c:	0d 92       	st	X+, r0
    243e:	81 50       	subi	r24, 0x01	; 1
    2440:	e1 f7       	brne	.-8      	; 0x243a <transmitHex+0x30>
    2442:	9e 01       	movw	r18, r28
    2444:	2e 5f       	subi	r18, 0xFE	; 254
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    2448:	84 2f       	mov	r24, r20
    244a:	8f 70       	andi	r24, 0x0F	; 15
    244c:	e9 2f       	mov	r30, r25
    244e:	f0 e0       	ldi	r31, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2450:	8a 30       	cpi	r24, 0x0A	; 10
    2452:	20 f4       	brcc	.+8      	; 0x245c <transmitHex+0x52>
    2454:	e2 0f       	add	r30, r18
    2456:	f3 1f       	adc	r31, r19
    2458:	80 5d       	subi	r24, 0xD0	; 208
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <transmitHex+0x58>
  else dataString [i+1] = (temp - 10) + 0x41;
    245c:	e2 0f       	add	r30, r18
    245e:	f3 1f       	adc	r31, r19
    2460:	89 5c       	subi	r24, 0xC9	; 201
    2462:	80 83       	st	Z, r24

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    2464:	91 50       	subi	r25, 0x01	; 1
    2466:	19 f4       	brne	.+6      	; 0x246e <transmitHex+0x64>
    2468:	fe 01       	movw	r30, r28
    246a:	31 96       	adiw	r30, 0x01	; 1
    246c:	0c c0       	rjmp	.+24     	; 0x2486 <transmitHex+0x7c>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	76 95       	lsr	r23
    2472:	67 95       	ror	r22
    2474:	57 95       	ror	r21
    2476:	47 95       	ror	r20
    2478:	8a 95       	dec	r24
    247a:	d1 f7       	brne	.-12     	; 0x2470 <transmitHex+0x66>
    247c:	e5 cf       	rjmp	.-54     	; 0x2448 <transmitHex+0x3e>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    247e:	5d 9b       	sbis	0x0b, 5	; 11
    2480:	fe cf       	rjmp	.-4      	; 0x247e <transmitHex+0x74>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    2482:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2484:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2486:	80 81       	ld	r24, Z
    2488:	88 23       	and	r24, r24
    248a:	c9 f7       	brne	.-14     	; 0x247e <transmitHex+0x74>

  data = data/16;
}

transmitString (dataString);
}
    248c:	2b 96       	adiw	r28, 0x0b	; 11
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    249e:	fc 01       	movw	r30, r24
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <transmitString_F+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    24a2:	5d 9b       	sbis	0x0b, 5	; 11
    24a4:	fe cf       	rjmp	.-4      	; 0x24a2 <transmitString_F+0x4>
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
    24a6:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    24a8:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    24aa:	84 91       	lpm	r24, Z+
    24ac:	88 23       	and	r24, r24
    24ae:	c9 f7       	brne	.-14     	; 0x24a2 <transmitString_F+0x4>
   transmitByte(pgm_read_byte(&(*string++)));
}
    24b0:	08 95       	ret

000024b2 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    24b2:	fc 01       	movw	r30, r24
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <transmitString+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    24b6:	5d 9b       	sbis	0x0b, 5	; 11
    24b8:	fe cf       	rjmp	.-4      	; 0x24b6 <transmitString+0x4>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    24ba:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    24bc:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	c9 f7       	brne	.-14     	; 0x24b6 <transmitString+0x4>
   transmitByte(*string++);
}
    24c4:	08 95       	ret

000024c6 <__mulsi3>:
    24c6:	62 9f       	mul	r22, r18
    24c8:	d0 01       	movw	r26, r0
    24ca:	73 9f       	mul	r23, r19
    24cc:	f0 01       	movw	r30, r0
    24ce:	82 9f       	mul	r24, r18
    24d0:	e0 0d       	add	r30, r0
    24d2:	f1 1d       	adc	r31, r1
    24d4:	64 9f       	mul	r22, r20
    24d6:	e0 0d       	add	r30, r0
    24d8:	f1 1d       	adc	r31, r1
    24da:	92 9f       	mul	r25, r18
    24dc:	f0 0d       	add	r31, r0
    24de:	83 9f       	mul	r24, r19
    24e0:	f0 0d       	add	r31, r0
    24e2:	74 9f       	mul	r23, r20
    24e4:	f0 0d       	add	r31, r0
    24e6:	65 9f       	mul	r22, r21
    24e8:	f0 0d       	add	r31, r0
    24ea:	99 27       	eor	r25, r25
    24ec:	72 9f       	mul	r23, r18
    24ee:	b0 0d       	add	r27, r0
    24f0:	e1 1d       	adc	r30, r1
    24f2:	f9 1f       	adc	r31, r25
    24f4:	63 9f       	mul	r22, r19
    24f6:	b0 0d       	add	r27, r0
    24f8:	e1 1d       	adc	r30, r1
    24fa:	f9 1f       	adc	r31, r25
    24fc:	bd 01       	movw	r22, r26
    24fe:	cf 01       	movw	r24, r30
    2500:	11 24       	eor	r1, r1
    2502:	08 95       	ret

00002504 <__udivmodsi4>:
    2504:	a1 e2       	ldi	r26, 0x21	; 33
    2506:	1a 2e       	mov	r1, r26
    2508:	aa 1b       	sub	r26, r26
    250a:	bb 1b       	sub	r27, r27
    250c:	fd 01       	movw	r30, r26
    250e:	0d c0       	rjmp	.+26     	; 0x252a <__udivmodsi4_ep>

00002510 <__udivmodsi4_loop>:
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	ee 1f       	adc	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	a2 17       	cp	r26, r18
    251a:	b3 07       	cpc	r27, r19
    251c:	e4 07       	cpc	r30, r20
    251e:	f5 07       	cpc	r31, r21
    2520:	20 f0       	brcs	.+8      	; 0x252a <__udivmodsi4_ep>
    2522:	a2 1b       	sub	r26, r18
    2524:	b3 0b       	sbc	r27, r19
    2526:	e4 0b       	sbc	r30, r20
    2528:	f5 0b       	sbc	r31, r21

0000252a <__udivmodsi4_ep>:
    252a:	66 1f       	adc	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	1a 94       	dec	r1
    2534:	69 f7       	brne	.-38     	; 0x2510 <__udivmodsi4_loop>
    2536:	60 95       	com	r22
    2538:	70 95       	com	r23
    253a:	80 95       	com	r24
    253c:	90 95       	com	r25
    253e:	9b 01       	movw	r18, r22
    2540:	ac 01       	movw	r20, r24
    2542:	bd 01       	movw	r22, r26
    2544:	cf 01       	movw	r24, r30
    2546:	08 95       	ret

00002548 <_exit>:
    2548:	f8 94       	cli

0000254a <__stop_program>:
    254a:	ff cf       	rjmp	.-2      	; 0x254a <__stop_program>
